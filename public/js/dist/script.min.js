(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*!
  * @preserve Qwery - A Blazing Fast query selector engine
  * https://github.com/ded/qwery
  * copyright Dustin Diaz 2012
  * MIT License
  */

(function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition()
  else if (typeof define == 'function' && define.amd) define(definition)
  else context[name] = definition()
})('qwery', this, function () {
  var doc = document
    , html = doc.documentElement
    , byClass = 'getElementsByClassName'
    , byTag = 'getElementsByTagName'
    , qSA = 'querySelectorAll'
    , useNativeQSA = 'useNativeQSA'
    , tagName = 'tagName'
    , nodeType = 'nodeType'
    , select // main select() method, assign later

    , id = /#([\w\-]+)/
    , clas = /\.[\w\-]+/g
    , idOnly = /^#([\w\-]+)$/
    , classOnly = /^\.([\w\-]+)$/
    , tagOnly = /^([\w\-]+)$/
    , tagAndOrClass = /^([\w]+)?\.([\w\-]+)$/
    , splittable = /(^|,)\s*[>~+]/
    , normalizr = /^\s+|\s*([,\s\+\~>]|$)\s*/g
    , splitters = /[\s\>\+\~]/
    , splittersMore = /(?![\s\w\-\/\?\&\=\:\.\(\)\!,@#%<>\{\}\$\*\^'"]*\]|[\s\w\+\-]*\))/
    , specialChars = /([.*+?\^=!:${}()|\[\]\/\\])/g
    , simple = /^(\*|[a-z0-9]+)?(?:([\.\#]+[\w\-\.#]+)?)/
    , attr = /\[([\w\-]+)(?:([\|\^\$\*\~]?\=)['"]?([ \w\-\/\?\&\=\:\.\(\)\!,@#%<>\{\}\$\*\^]+)["']?)?\]/
    , pseudo = /:([\w\-]+)(\(['"]?([^()]+)['"]?\))?/
    , easy = new RegExp(idOnly.source + '|' + tagOnly.source + '|' + classOnly.source)
    , dividers = new RegExp('(' + splitters.source + ')' + splittersMore.source, 'g')
    , tokenizr = new RegExp(splitters.source + splittersMore.source)
    , chunker = new RegExp(simple.source + '(' + attr.source + ')?' + '(' + pseudo.source + ')?')

  var walker = {
      ' ': function (node) {
        return node && node !== html && node.parentNode
      }
    , '>': function (node, contestant) {
        return node && node.parentNode == contestant.parentNode && node.parentNode
      }
    , '~': function (node) {
        return node && node.previousSibling
      }
    , '+': function (node, contestant, p1, p2) {
        if (!node) return false
        return (p1 = previous(node)) && (p2 = previous(contestant)) && p1 == p2 && p1
      }
    }

  function cache() {
    this.c = {}
  }
  cache.prototype = {
    g: function (k) {
      return this.c[k] || undefined
    }
  , s: function (k, v, r) {
      v = r ? new RegExp(v) : v
      return (this.c[k] = v)
    }
  }

  var classCache = new cache()
    , cleanCache = new cache()
    , attrCache = new cache()
    , tokenCache = new cache()

  function classRegex(c) {
    return classCache.g(c) || classCache.s(c, '(^|\\s+)' + c + '(\\s+|$)', 1)
  }

  // not quite as fast as inline loops in older browsers so don't use liberally
  function each(a, fn) {
    var i = 0, l = a.length
    for (; i < l; i++) fn(a[i])
  }

  function flatten(ar) {
    for (var r = [], i = 0, l = ar.length; i < l; ++i) arrayLike(ar[i]) ? (r = r.concat(ar[i])) : (r[r.length] = ar[i])
    return r
  }

  function arrayify(ar) {
    var i = 0, l = ar.length, r = []
    for (; i < l; i++) r[i] = ar[i]
    return r
  }

  function previous(n) {
    while (n = n.previousSibling) if (n[nodeType] == 1) break;
    return n
  }

  function q(query) {
    return query.match(chunker)
  }

  // called using `this` as element and arguments from regex group results.
  // given => div.hello[title="world"]:foo('bar')
  // div.hello[title="world"]:foo('bar'), div, .hello, [title="world"], title, =, world, :foo('bar'), foo, ('bar'), bar]
  function interpret(whole, tag, idsAndClasses, wholeAttribute, attribute, qualifier, value, wholePseudo, pseudo, wholePseudoVal, pseudoVal) {
    var i, m, k, o, classes
    if (this[nodeType] !== 1) return false
    if (tag && tag !== '*' && this[tagName] && this[tagName].toLowerCase() !== tag) return false
    if (idsAndClasses && (m = idsAndClasses.match(id)) && m[1] !== this.id) return false
    if (idsAndClasses && (classes = idsAndClasses.match(clas))) {
      for (i = classes.length; i--;) if (!classRegex(classes[i].slice(1)).test(this.className)) return false
    }
    if (pseudo && qwery.pseudos[pseudo] && !qwery.pseudos[pseudo](this, pseudoVal)) return false
    if (wholeAttribute && !value) { // select is just for existance of attrib
      o = this.attributes
      for (k in o) {
        if (Object.prototype.hasOwnProperty.call(o, k) && (o[k].name || k) == attribute) {
          return this
        }
      }
    }
    if (wholeAttribute && !checkAttr(qualifier, getAttr(this, attribute) || '', value)) {
      // select is for attrib equality
      return false
    }
    return this
  }

  function clean(s) {
    return cleanCache.g(s) || cleanCache.s(s, s.replace(specialChars, '\\$1'))
  }

  function checkAttr(qualify, actual, val) {
    switch (qualify) {
    case '=':
      return actual == val
    case '^=':
      return actual.match(attrCache.g('^=' + val) || attrCache.s('^=' + val, '^' + clean(val), 1))
    case '$=':
      return actual.match(attrCache.g('$=' + val) || attrCache.s('$=' + val, clean(val) + '$', 1))
    case '*=':
      return actual.match(attrCache.g(val) || attrCache.s(val, clean(val), 1))
    case '~=':
      return actual.match(attrCache.g('~=' + val) || attrCache.s('~=' + val, '(?:^|\\s+)' + clean(val) + '(?:\\s+|$)', 1))
    case '|=':
      return actual.match(attrCache.g('|=' + val) || attrCache.s('|=' + val, '^' + clean(val) + '(-|$)', 1))
    }
    return 0
  }

  // given a selector, first check for simple cases then collect all base candidate matches and filter
  function _qwery(selector, _root) {
    var r = [], ret = [], i, l, m, token, tag, els, intr, item, root = _root
      , tokens = tokenCache.g(selector) || tokenCache.s(selector, selector.split(tokenizr))
      , dividedTokens = selector.match(dividers)

    if (!tokens.length) return r

    token = (tokens = tokens.slice(0)).pop() // copy cached tokens, take the last one
    if (tokens.length && (m = tokens[tokens.length - 1].match(idOnly))) root = byId(_root, m[1])
    if (!root) return r

    intr = q(token)
    // collect base candidates to filter
    els = root !== _root && root[nodeType] !== 9 && dividedTokens && /^[+~]$/.test(dividedTokens[dividedTokens.length - 1]) ?
      function (r) {
        while (root = root.nextSibling) {
          root[nodeType] == 1 && (intr[1] ? intr[1] == root[tagName].toLowerCase() : 1) && (r[r.length] = root)
        }
        return r
      }([]) :
      root[byTag](intr[1] || '*')
    // filter elements according to the right-most part of the selector
    for (i = 0, l = els.length; i < l; i++) {
      if (item = interpret.apply(els[i], intr)) r[r.length] = item
    }
    if (!tokens.length) return r

    // filter further according to the rest of the selector (the left side)
    each(r, function (e) { if (ancestorMatch(e, tokens, dividedTokens)) ret[ret.length] = e })
    return ret
  }

  // compare element to a selector
  function is(el, selector, root) {
    if (isNode(selector)) return el == selector
    if (arrayLike(selector)) return !!~flatten(selector).indexOf(el) // if selector is an array, is el a member?

    var selectors = selector.split(','), tokens, dividedTokens
    while (selector = selectors.pop()) {
      tokens = tokenCache.g(selector) || tokenCache.s(selector, selector.split(tokenizr))
      dividedTokens = selector.match(dividers)
      tokens = tokens.slice(0) // copy array
      if (interpret.apply(el, q(tokens.pop())) && (!tokens.length || ancestorMatch(el, tokens, dividedTokens, root))) {
        return true
      }
    }
    return false
  }

  // given elements matching the right-most part of a selector, filter out any that don't match the rest
  function ancestorMatch(el, tokens, dividedTokens, root) {
    var cand
    // recursively work backwards through the tokens and up the dom, covering all options
    function crawl(e, i, p) {
      while (p = walker[dividedTokens[i]](p, e)) {
        if (isNode(p) && (interpret.apply(p, q(tokens[i])))) {
          if (i) {
            if (cand = crawl(p, i - 1, p)) return cand
          } else return p
        }
      }
    }
    return (cand = crawl(el, tokens.length - 1, el)) && (!root || isAncestor(cand, root))
  }

  function isNode(el, t) {
    return el && typeof el === 'object' && (t = el[nodeType]) && (t == 1 || t == 9)
  }

  function uniq(ar) {
    var a = [], i, j;
    o:
    for (i = 0; i < ar.length; ++i) {
      for (j = 0; j < a.length; ++j) if (a[j] == ar[i]) continue o
      a[a.length] = ar[i]
    }
    return a
  }

  function arrayLike(o) {
    return (typeof o === 'object' && isFinite(o.length))
  }

  function normalizeRoot(root) {
    if (!root) return doc
    if (typeof root == 'string') return qwery(root)[0]
    if (!root[nodeType] && arrayLike(root)) return root[0]
    return root
  }

  function byId(root, id, el) {
    // if doc, query on it, else query the parent doc or if a detached fragment rewrite the query and run on the fragment
    return root[nodeType] === 9 ? root.getElementById(id) :
      root.ownerDocument &&
        (((el = root.ownerDocument.getElementById(id)) && isAncestor(el, root) && el) ||
          (!isAncestor(root, root.ownerDocument) && select('[id="' + id + '"]', root)[0]))
  }

  function qwery(selector, _root) {
    var m, el, root = normalizeRoot(_root)

    // easy, fast cases that we can dispatch with simple DOM calls
    if (!root || !selector) return []
    if (selector === window || isNode(selector)) {
      return !_root || (selector !== window && isNode(root) && isAncestor(selector, root)) ? [selector] : []
    }
    if (selector && arrayLike(selector)) return flatten(selector)
    if (m = selector.match(easy)) {
      if (m[1]) return (el = byId(root, m[1])) ? [el] : []
      if (m[2]) return arrayify(root[byTag](m[2]))
      if (hasByClass && m[3]) return arrayify(root[byClass](m[3]))
    }

    return select(selector, root)
  }

  // where the root is not document and a relationship selector is first we have to
  // do some awkward adjustments to get it to work, even with qSA
  function collectSelector(root, collector) {
    return function (s) {
      var oid, nid
      if (splittable.test(s)) {
        if (root[nodeType] !== 9) {
          // make sure the el has an id, rewrite the query, set root to doc and run it
          if (!(nid = oid = root.getAttribute('id'))) root.setAttribute('id', nid = '__qwerymeupscotty')
          s = '[id="' + nid + '"]' + s // avoid byId and allow us to match context element
          collector(root.parentNode || root, s, true)
          oid || root.removeAttribute('id')
        }
        return;
      }
      s.length && collector(root, s, false)
    }
  }

  var isAncestor = 'compareDocumentPosition' in html ?
    function (element, container) {
      return (container.compareDocumentPosition(element) & 16) == 16
    } : 'contains' in html ?
    function (element, container) {
      container = container[nodeType] === 9 || container == window ? html : container
      return container !== element && container.contains(element)
    } :
    function (element, container) {
      while (element = element.parentNode) if (element === container) return 1
      return 0
    }
  , getAttr = function () {
      // detect buggy IE src/href getAttribute() call
      var e = doc.createElement('p')
      return ((e.innerHTML = '<a href="#x">x</a>') && e.firstChild.getAttribute('href') != '#x') ?
        function (e, a) {
          return a === 'class' ? e.className : (a === 'href' || a === 'src') ?
            e.getAttribute(a, 2) : e.getAttribute(a)
        } :
        function (e, a) { return e.getAttribute(a) }
    }()
  , hasByClass = !!doc[byClass]
    // has native qSA support
  , hasQSA = doc.querySelector && doc[qSA]
    // use native qSA
  , selectQSA = function (selector, root) {
      var result = [], ss, e
      try {
        if (root[nodeType] === 9 || !splittable.test(selector)) {
          // most work is done right here, defer to qSA
          return arrayify(root[qSA](selector))
        }
        // special case where we need the services of `collectSelector()`
        each(ss = selector.split(','), collectSelector(root, function (ctx, s) {
          e = ctx[qSA](s)
          if (e.length == 1) result[result.length] = e.item(0)
          else if (e.length) result = result.concat(arrayify(e))
        }))
        return ss.length > 1 && result.length > 1 ? uniq(result) : result
      } catch (ex) { }
      return selectNonNative(selector, root)
    }
    // no native selector support
  , selectNonNative = function (selector, root) {
      var result = [], items, m, i, l, r, ss
      selector = selector.replace(normalizr, '$1')
      if (m = selector.match(tagAndOrClass)) {
        r = classRegex(m[2])
        items = root[byTag](m[1] || '*')
        for (i = 0, l = items.length; i < l; i++) {
          if (r.test(items[i].className)) result[result.length] = items[i]
        }
        return result
      }
      // more complex selector, get `_qwery()` to do the work for us
      each(ss = selector.split(','), collectSelector(root, function (ctx, s, rewrite) {
        r = _qwery(s, ctx)
        for (i = 0, l = r.length; i < l; i++) {
          if (ctx[nodeType] === 9 || rewrite || isAncestor(r[i], root)) result[result.length] = r[i]
        }
      }))
      return ss.length > 1 && result.length > 1 ? uniq(result) : result
    }
  , configure = function (options) {
      // configNativeQSA: use fully-internal selector or native qSA where present
      if (typeof options[useNativeQSA] !== 'undefined')
        select = !options[useNativeQSA] ? selectNonNative : hasQSA ? selectQSA : selectNonNative
    }

  configure({ useNativeQSA: true })

  qwery.configure = configure
  qwery.uniq = uniq
  qwery.is = is
  qwery.pseudos = {}

  return qwery
});

},{}],2:[function(require,module,exports){
/***************************************************************
  * Traversty: A DOM collection management and traversal utility
  * (c) Rod Vagg (@rvagg) 2012
  * https://github.com/rvagg/traversty
  * License: MIT
  */

(function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports)
    module.exports = definition()
  else if (typeof define == 'function' && define.amd)
    define(definition)
  else
    context[name] = definition()
})('traversty', this, function () {

  var context = this
    , old = context.traversty
    , doc = window.document
    , html = doc.documentElement
    , toString = Object.prototype.toString
    , Ap = Array.prototype
    , slice = Ap.slice
      // feature test to find native matchesSelector()
    , matchesSelector = (function (el, pfx, name, i, ms) {
        while (i < pfx.length)
          if (el[ms = pfx[i++] + name])
            return ms
      }(html, [ 'msM', 'webkitM', 'mozM', 'oM', 'm' ], 'atchesSelector', 0))

    , Kfalse = function () { return false }

    , isNumber = function (o) {
        return toString.call(o) === '[object Number]'
      }

    , isString = function (o) {
        return toString.call(o) === '[object String]'
      }

    , isFunction = function (o) {
        return toString.call(o) === '[object Function]'
      }

    , isUndefined = function (o) {
        return o === void 0
      }

    , isElement = function (o) {
        return o && o.nodeType === 1
      }

      // figure out which argument, if any, is our 'index'
    , getIndex = function (selector, index) {
        return isUndefined(selector) && !isNumber(index) ? 0 :
          isNumber(selector) ? selector : isNumber(index) ? index : null
      }

      // figure out which argument, if any, is our 'selector'
    , getSelector = function (selector) {
        return isString(selector) ? selector : '*'
      }

    , nativeSelectorFind = function (selector, el) {
        return slice.call(el.querySelectorAll(selector), 0)
      }

    , nativeSelectorMatches = function (selector, el) {
        return selector === '*' || el[matchesSelector](selector)
      }

    , selectorFind = nativeSelectorFind

    , selectorMatches = nativeSelectorMatches

      // used in the case where our selector engine does out-of-order element returns for
      // grouped selectors, e.g. '.class, tag', we need our elements in document-order
      // so we do it ourselves if need be
    , createUnorderedEngineSelectorFind = function(engineSelect, selectorMatches) {
        return function (selector, el) {
          if (/,/.test(selector)) {
            var ret = [], i = -1, els = el.getElementsByTagName('*')
            while (++i < els.length)
              if (isElement(els[i]) && selectorMatches(selector, els[i]))
                ret.push(els[i])
            return ret
          }
          return engineSelect(selector, el)
        }
      }

      // is 'element' underneath 'container' somewhere
    , isAncestor = 'compareDocumentPosition' in html
        ? function (element, container) {
            return (container.compareDocumentPosition(element) & 16) == 16
          }
        : 'contains' in html
          ? function (element, container) {
              container = container.nodeType === 9 || container == window ? html : container
              return container !== element && container.contains(element)
            }
          : function (element, container) { // old smelly browser
              while (element = element.parentNode)
                if (element === container)
                  return 1
              return 0
            }

      // return an array containing only unique elements
    , unique = function (ar) {
        var a = [], i = -1, j, has
        while (++i < ar.length) {
          j = -1
          has = false
          while (++j < a.length) {
            if (a[j] === ar[i]) {
              has = true
              break
            }
          }
          if (!has)
            a.push(ar[i])
        }
        return a
      }

      // for each element of 'els' execute 'fn' to get an array of elements to collect
    , collect = function (els, fn) {
        var ret = [], res, i = 0, j, l = els.length, l2
        while (i < l) {
          j = 0
          l2 = (res = fn(els[i], i++)).length
          while (j < l2)
            ret.push(res[j++])
        }
        return ret
      }

     // generic DOM navigator to move multiple elements around the DOM
   , move = function (els, method, selector, index, filterFn) {
        index = getIndex(selector, index)
        selector = getSelector(selector)
        return collect(els
          , function (el, elind) {
              var i = index || 0, ret = []
              if (!filterFn)
                el = el[method]
              while (el && (index === null || i >= 0)) {
                // ignore non-elements, only consider selector-matching elements
                // handle both the index and no-index (selector-only) cases
                if (isElement(el)
                    && (!filterFn || filterFn === true || filterFn(el, elind))
                    && selectorMatches(selector, el)
                    && (index === null || i-- === 0)) {
                  // this concat vs push is to make sure we add elements to the result array
                  // in reverse order when doing a previous(selector) and up(selector)
                  index === null
                      && method != 'nextSibling'
                      && method != 'parentNode'
                    ? ret.unshift(el)
                    : ret.push(el)
                }
                el = el[method]
              }
              return ret
            }
        )
      }

      // given an index & length, return a 'fixed' index, fixes non-numbers & neative indexes
    , eqIndex = function (length, index, def) {
        if (index < 0)
          index = length + index
        if (index < 0 || index >= length)
          return null
        return !index && index !== 0 ? def : index
      }

      // collect elements of an array that match a filter function
    , filter = function (els, fn) {
        var arr = [], i = 0, l = els.length
        for (; i < l; i++)
          if (fn(els[i], i))
            arr.push(els[i])
        return arr
      }

      // create a filter function, for use by filter(), is() & not()
      // allows the argument to be an element, a function or a selector
    , filterFn = function (slfn) {
        var to
        return isElement(slfn)
          ? function (el) { return el === slfn }
          : (to = typeof slfn) == 'function'
            ? function (el, i) { return slfn.call(el, i) }
            : to == 'string' && slfn.length
              ? function (el) { return selectorMatches(slfn, el) }
              : Kfalse
      }

      // fn = !fn
    , inv = function (fn) {
        return function () {
          return !fn.apply(this, arguments)
        }
      }

    , traversty = (function () {
        function T(els) {
          this.length = 0
          if (els) {
            els = unique(!els.nodeType && !isUndefined(els.length) ? els : [ els ])
            var i = this.length = els.length
            while (i--)
              this[i] = els[i]
          }
        }

        T.prototype = {
            down: function (selector, index) {
              index = getIndex(selector, index)
              selector = getSelector(selector)
              return traversty(collect(this
                , function (el) {
                    var f = selectorFind(selector, el)
                    return index === null ? f : ([ f[index] ] || [])
                  }
                ))
            }

          , up: function (selector, index) {
              return traversty(move(this, 'parentNode', selector, index))
            }

          , parents: function () {
              return T.prototype.up.apply(this, arguments.length ? arguments : [ '*' ])
            }

          , closest: function (selector, index) {
              if (isNumber(selector)) {
                index = selector
                selector = '*'
              } else if (!isString(selector)) {
                return traversty([])
              } else if (!isNumber(index)) {
                index = 0
              }
              return traversty(move(this, 'parentNode', selector, index, true))
            }

          , previous: function (selector, index) {
              return traversty(move(this, 'previousSibling', selector, index))
            }

          , next: function (selector, index) {
              return traversty(move(this, 'nextSibling', selector, index))
            }

          , siblings: function (selector, index) {
              var self = this
                , arr = slice.call(this, 0)
                , i = 0, l = arr.length

              for (; i < l; i++) {
                arr[i] = arr[i].parentNode.firstChild
                while (!isElement(arr[i]))
                  arr[i] = arr[i].nextSibling
              }

              if (isUndefined(selector))
                selector = '*'

              return traversty(move(arr, 'nextSibling', selector || '*', index
                    , function (el, i) { return el !== self[i] } // filter
                  ))
            }

          , children: function (selector, index) {
              return traversty(move(T.prototype.down.call(this), 'nextSibling', selector || '*', index, true))
            }

          , first: function () {
              return T.prototype.eq.call(this, 0)
            }

          , last: function () {
              return T.prototype.eq.call(this, -1)
            }

          , eq: function (index) {
              return traversty(this.get(index))
            }

          , get: function (index) {
              return this[eqIndex(this.length, index, 0)]
            }

            // a crazy man wrote this, don't try to understand it, see the tests
          , slice: function (start, end) {
              var e = end, l = this.length, arr = []
              start = eqIndex(l, Math.max(-this.length, start), 0)
              e = eqIndex(end < 0 ? l : l + 1, end, l)
              end = e === null || e > l ? end < 0 ? 0 : l : e
              while (start !== null && start < end)
                arr.push(this[start++])
              return traversty(arr)
            }

          , filter: function (slfn) {
              return traversty(filter(this, filterFn(slfn)))
            }

          , not: function (slfn) {
              return traversty(filter(this, inv(filterFn(slfn))))
            }

            // similar to filter() but cares about descendent elements
          , has: function (slel) {
              return traversty(filter(
                  this
                , isElement(slel)
                    ? function (el) { return isAncestor(slel, el) }
                    : typeof slel == 'string' && slel.length
                      ? function (el) { return selectorFind(slel, el).length } //TODO: performance
                      : Kfalse
              ))
            }

            // same as filter() but return a boolean so quick-return after first successful find
          , is: function (slfn) {
              var i = 0, l = this.length
                , fn = filterFn(slfn)
              for (; i < l; i++)
                if (fn(this[i], i))
                  return true
              return false
            }

          , toArray: function () { return Ap.slice.call(this) }

          , size: function () { return this.length }

          , each: function (fn, ctx) {
              var i = 0, l = this.length
              for (; i < l; i++)
                fn.call(ctx || this[i], this[i], i, this)
              return this
            }

            // quack like a duck (Array)
          , push: Ap.push
          , sort: Ap.sort
          , splice: Ap.splice
        }

        T.prototype.prev = T.prototype.previous

        function t(els) {
          return new T(isString(els) ? selectorFind(els, doc) : els)
        }

        // extend traversty functionality with custom methods
        t.aug = function (methods) {
          var key, method
          for (key in methods) {
            method = methods[key]
            if (typeof method == 'function')
              T.prototype[key] = method
          }
        }


        t.setSelectorEngine = function (s) {
          // feature testing the selector engine like a boss
          var ss, r, a, _selectorMatches, _selectorFind
            , e = doc.createElement('p')
            , select = s.select || s.sel || s

          e.innerHTML = '<a/><i/><b/>'
          a = e.firstChild
          try {
            // YO! I HEARD YOU LIKED NESTED TERNARY OPERATORS SO I COOKED SOME UP FOR YOU!
            // (one day I might loop this...)

            // check to see how we do a matchesSelector
            _selectorMatches = isFunction(s.matching)
              ? function (selector, el) { return s.matching([el], selector).length > 0 }
              : isFunction(s.is)
                ? function (selector, el) { return s.is(el, selector) }
                : isFunction(s.matchesSelector)
                  ? function (selector, el) { return s.matchesSelector(el, selector) }
                  : isFunction(s.match)
                    ? function (selector, el) { return s.match(el, selector) }
                    : isFunction(s.matches)
                      ? function (selector, el) { return s.matches(el, selector) }
                      : null

            if (!_selectorMatches) {
              // perhaps it's an selector(x).is(y) type selector?
              ss = s('a', e)
              _selectorMatches = isFunction(ss._is)
                ? function (selector, el) { return s(el)._is(selector) } // original .is(), replaced by Ender bridge
                : isFunction(ss.matching)
                  ? function (selector, el) { return s(el).matching(selector).length > 0 }
                  : isFunction(ss.is) && !ss.is.__ignore
                    ? function (selector, el) { return s(el).is(selector) }
                      : isFunction(ss.matchesSelector)
                        ? function (selector, el) { return s(el).matchesSelector(selector) }
                        : isFunction(ss.match)
                          ? function (selector, el) { return s(el).match(selector) }
                          : isFunction(ss.matches)
                            ? function (selector, el) { return s(el).matches(selector) }
                            : null
            }

            if (!_selectorMatches)
                throw new Error('Traversty: couldn\'t find selector engine\'s `matchesSelector`')

            // verify that we have a working `matchesSelector`
            if (_selectorMatches('x,y', e) || !_selectorMatches('a,p', e))
                throw new Error('Traversty: couldn\'t make selector engine\'s `matchesSelector` work')

            // basic select
            if ((r = select('b,a', e)).length !== 2)
              throw new Error('Traversty: don\'t know how to use this selector engine')

            // check to see if the selector engine has given us the results in document-order
            // and if not, work around it
            _selectorFind = r[0] === a ? select : createUnorderedEngineSelectorFind(select, _selectorMatches)

            // have we done enough to get a working `selectorFind`?
            if ((r = _selectorFind('b,a', e)).length !== 2 || r[0] !== a)
              throw new Error('Traversty: couldn\'t make selector engine work')

            selectorMatches = _selectorMatches
            selectorFind = _selectorFind
          } catch (ex) {
            throw isString(ex)
              ? ex
              : new Error('Traversty: error while figuring out how the selector engine works: ' + (ex.message || ex))
          } finally {
            e = null
          }

          return t
        }

        t.noConflict = function () {
          context.traversty = old
          return this
        }

        return t
      }())
 
  return traversty
});
},{}],3:[function(require,module,exports){
/* ==========================================================================
   Log.js - Lightweight wrapper for console.log

   Usage: log('inside coolFunc', this, arguments);
   * paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/
   ========================================================================== */
window.log = function f() {
	log.history = log.history || [];
	log.history.push(arguments);
	if (this.console) {
		var args = arguments,
			newarr;
		try {
			args.callee = f.caller;
		} catch (e) {}
		newarr = [].slice.call(args);
		if (typeof console.log === 'object')  {
			log.apply.call(console.log, console, newarr);
		} else {
			console.log.apply(console, newarr);
		}
	}
};

},{}],4:[function(require,module,exports){
/*! 
Included shims: Array.forEach,Array.filter,Array.map,Function.bind,EventListener
*/

/*
    Array.prototype.forEach()
*/
if (!Array.prototype.forEach) {
    Array.prototype.forEach = function(t, e) {
        var n, r;
        if (this == null) {
            throw new TypeError(" this is null or not defined");
        }
        // 1. Let O be the result of calling ToObject passing the |this| value as the argument.
        var i = Object(this);
        // 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
        // 3. Let len be ToUint32(lenValue).
        var o = i.length >>> 0;
        // 4. If IsCallable(callback) is false, throw a TypeError exception.
        // See: http://es5.github.com/#x9.11
        if (typeof t !== "function") {
            throw new TypeError(t + " is not a function");
        }
        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (e) {
            n = e;
        }
        // 6. Let k be 0
        r = 0;
        // 7. Repeat, while k < len
        while (r < o) {
            var a;
            // a. Let Pk be ToString(k).
            //   This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
            //   This step can be combined with c
            // c. If kPresent is true, then
            if (r in i) {
                // i. Let kValue be the result of calling the Get internal method of O with argument Pk.
                a = i[r];
                // ii. Call the Call internal method of callback with T as the this value and
                // argument list containing kValue, k, and O.
                t.call(n, a, r, i);
            }
            // d. Increase k by 1.
            r++;
        }
    };
}

/*
    Array.prototype.filter()
*/
if (!Array.prototype.filter) {
    Array.prototype.filter = function(t) {
        "use strict";
        if (this === void 0 || this === null) throw new TypeError();
        var e = Object(this);
        var n = e.length >>> 0;
        if (typeof t !== "function") throw new TypeError();
        var r = [];
        var i = arguments.length >= 2 ? arguments[1] : void 0;
        for (var o = 0; o < n; o++) {
            if (o in e) {
                var a = e[o];
                // NOTE: Technically this should Object.defineProperty at
                //       the next index, as push can be affected by
                //       properties on Object.prototype and Array.prototype.
                //       But that method's new, and collisions should be
                //       rare, so use the more-compatible alternative.
                if (t.call(i, a, o, e)) r.push(a);
            }
        }
        return r;
    };
}

/*
   Array map patch
   ========================================================================== */
if (!("map" in Array.prototype)) {
    Array.prototype.map = function(t, e) {
        var n = this.length >>> 0, r = Array(n);
        for (var i = 0; i < n; i++) {
            if (i in this) {
                r[i] = t.call(e, this[i], i, this);
            }
        }
        return r;
    };
}

/*
    Function.prototype.bind()
*/
if (!Function.prototype.bind) {
    Function.prototype.bind = function(t) {
        if (typeof this !== "function") {
            // closest thing possible to the ECMAScript 5
            // internal IsCallable function
            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
        }
        var e = Array.prototype.slice.call(arguments, 1), n = this, r = function() {}, i = function() {
            return n.apply(this instanceof r && t ? this : t, e.concat(Array.prototype.slice.call(arguments)));
        };
        r.prototype = this.prototype;
        i.prototype = new r();
        return i;
    };
}

// EventListener | MIT/GPL2 | https://github.com/jonathantneal/EventListener
this.Element && Element.prototype.attachEvent && !Element.prototype.addEventListener && function() {
    function t(t, e) {
        Window.prototype[t] = HTMLDocument.prototype[t] = Element.prototype[t] = e;
    }
    // add
    t("addEventListener", function(t, e) {
        var n = this, r = n.addEventListener.listeners = n.addEventListener.listeners || {}, i = r[t] = r[t] || [];
        // if no events exist, attach the listener
        if (!i.length) {
            n.attachEvent("on" + t, i.event = function(t) {
                var e = n.document && n.document.documentElement || n.documentElement || {
                    scrollLeft: 0,
                    scrollTop: 0
                };
                // polyfill w3c properties and methods
                t.currentTarget = n;
                t.pageX = t.clientX + e.scrollLeft;
                t.pageY = t.clientY + e.scrollTop;
                t.preventDefault = function() {
                    t.returnValue = false;
                };
                t.relatedTarget = t.fromElement || null;
                t.stopImmediatePropagation = function() {
                    l = false;
                    t.cancelBubble = true;
                };
                t.stopPropagation = function() {
                    t.cancelBubble = true;
                };
                t.target = t.srcElement || n;
                t.timeStamp = +new Date();
                // create an cached list of the master events list (to protect this loop from breaking when an event is removed)
                for (var r = 0, o = [].concat(i), a, l = true; l && (a = o[r]); ++r) {
                    // check to see if the cached event still exists in the master events list
                    for (var c = 0, s; s = i[c]; ++c) {
                        if (s == a) {
                            s.call(n, t);
                            break;
                        }
                    }
                }
            });
        }
        // add the event to the master event list
        i.push(e);
    });
    // remove
    t("removeEventListener", function(t, e) {
        var n = this, r = n.addEventListener.listeners = n.addEventListener.listeners || {}, i = r[t] = r[t] || [];
        // remove the newest matching event from the master event list
        for (var o = i.length - 1, a; a = i[o]; --o) {
            if (a == e) {
                i.splice(o, 1);
                break;
            }
        }
        // if no events exist, detach the listener
        if (!i.length && i.event) {
            n.detachEvent("on" + t, i.event);
        }
    });
    // dispatch
    t("dispatchEvent", function(t) {
        var e = this, n = t.type, r = e.addEventListener.listeners = e.addEventListener.listeners || {}, i = r[n] = r[n] || [];
        try {
            return e.fireEvent("on" + n, t);
        } catch (o) {
            if (i.event) {
                i.event(t);
            }
            return;
        }
    });
    // CustomEvent
    Object.defineProperty(Window.prototype, "CustomEvent", {
        get: function() {
            var t = this;
            return function e(n, r) {
                var i = t.document.createEventObject(), o;
                i.type = n;
                for (o in r) {
                    if (o == "cancelable") {
                        i.returnValue = !r.cancelable;
                    } else if (o == "bubbles") {
                        i.cancelBubble = !r.bubbles;
                    } else if (o == "detail") {
                        i.detail = r.detail;
                    }
                }
                return i;
            };
        }
    });
    // ready
    function e(t) {
        if (e.interval && document.body) {
            e.interval = clearInterval(e.interval);
            document.dispatchEvent(new CustomEvent("DOMContentLoaded"));
        }
    }
    e.interval = setInterval(e, 1);
    window.addEventListener("load", e);
}();

!this.CustomEvent && function() {
    // CustomEvent for browsers which don't natively support the Constructor method
    window.CustomEvent = function t(e, n) {
        var r;
        n = n || {
            bubbles: false,
            cancelable: false,
            detail: undefined
        };
        try {
            r = document.createEvent("CustomEvent");
            r.initCustomEvent(e, n.bubbles, n.cancelable, n.detail);
        } catch (i) {
            // for browsers which don't support CustomEvent at all, we use a regular event instead
            r = document.createEvent("Event");
            r.initEvent(e, n.bubbles, n.cancelable);
            r.detail = n.detail;
        }
        return r;
    };
}();
},{}],5:[function(require,module,exports){
/*
	sockets.js
*/

// dependencies for this module go here
var UI = require('./ui');

var Sockets = {
	socket : null,

	init : function () {
		console.debug('KO.sockets module is being initialised');

		this.makeSocketConnection();

		this.Listeners.setup();
	},

	makeSocketConnection : function () {

		var connectionURL = window.location.hostname;

		this.socket = io.connect(connectionURL);

	},

	Listeners : {

		setup : function () {

			Sockets.socket.on('tweet', this.onTweetReceived);

		},

		onTweetReceived : function (stateObj) {

			for (var key in stateObj) {

				UI.updateSymbol(key, stateObj[key]);

			}

		}

	}


};

module.exports = Sockets;
},{"./ui":6}],6:[function(require,module,exports){
/*
	UI.js
	Example module to show how to include other JS files into you browserify build
*/

// dependencies for this module go here
var $ = require('traversty'),
	qwery = require('qwery');

//give us old IE selector support (<8)
$.setSelectorEngine(qwery);

var UI = {
	init : function () {
		console.debug('KO.UI module is being initialised');
	},


	updateSymbol : function (name, data) {

		//log(name, data)
		var symbolTotal = $('.symbol--' + name + ' .symbol-total');

		symbolTotal[0].innerHTML = data.total;

	}
};

module.exports = UI;
},{"qwery":1,"traversty":2}],7:[function(require,module,exports){
/*	Author:
		TMW - (Author Name Here)
*/

// --------------------------------------------- //
// DEFINE GLOBAL LIBS                            //
// --------------------------------------------- //
// Uncomment the line below to expose jQuery as a global object to the usual places
// window.jQuery = window.$ = require('./libs/jquery/jquery-1.10.2.js');

// force compilation of global libs that don't return a value.
require("./helpers/log");
require("./helpers/shims");

var Sockets = require('./modules/sockets');


//initialise KO object
var KO = {};

KO.Config = {

	init : function () {

		log('running');
		Sockets.init();
	}
};


KO.Config.init();
},{"./helpers/log":3,"./helpers/shims":4,"./modules/sockets":5}]},{},[7])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9ncnVudC1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvYW5vbGFuMS9fcHJvamVjdHMvX2xhYnMvdHdpdHRlci1oYXNodGFnLXdhdGNoZXIvbm9kZV9tb2R1bGVzL3F3ZXJ5L3F3ZXJ5LmpzIiwiL1VzZXJzL2Fub2xhbjEvX3Byb2plY3RzL19sYWJzL3R3aXR0ZXItaGFzaHRhZy13YXRjaGVyL25vZGVfbW9kdWxlcy90cmF2ZXJzdHkvdHJhdmVyc3R5LmpzIiwiL1VzZXJzL2Fub2xhbjEvX3Byb2plY3RzL19sYWJzL3R3aXR0ZXItaGFzaHRhZy13YXRjaGVyL3B1YmxpYy9qcy9oZWxwZXJzL2xvZy5qcyIsIi9Vc2Vycy9hbm9sYW4xL19wcm9qZWN0cy9fbGFicy90d2l0dGVyLWhhc2h0YWctd2F0Y2hlci9wdWJsaWMvanMvaGVscGVycy9zaGltcy5qcyIsIi9Vc2Vycy9hbm9sYW4xL19wcm9qZWN0cy9fbGFicy90d2l0dGVyLWhhc2h0YWctd2F0Y2hlci9wdWJsaWMvanMvbW9kdWxlcy9zb2NrZXRzLmpzIiwiL1VzZXJzL2Fub2xhbjEvX3Byb2plY3RzL19sYWJzL3R3aXR0ZXItaGFzaHRhZy13YXRjaGVyL3B1YmxpYy9qcy9tb2R1bGVzL3VpLmpzIiwiL1VzZXJzL2Fub2xhbjEvX3Byb2plY3RzL19sYWJzL3R3aXR0ZXItaGFzaHRhZy13YXRjaGVyL3B1YmxpYy9qcy9zY3JpcHQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeGNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKiFcbiAgKiBAcHJlc2VydmUgUXdlcnkgLSBBIEJsYXppbmcgRmFzdCBxdWVyeSBzZWxlY3RvciBlbmdpbmVcbiAgKiBodHRwczovL2dpdGh1Yi5jb20vZGVkL3F3ZXJ5XG4gICogY29weXJpZ2h0IER1c3RpbiBEaWF6IDIwMTJcbiAgKiBNSVQgTGljZW5zZVxuICAqL1xuXG4oZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQsIGRlZmluaXRpb24pIHtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpXG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoZGVmaW5pdGlvbilcbiAgZWxzZSBjb250ZXh0W25hbWVdID0gZGVmaW5pdGlvbigpXG59KSgncXdlcnknLCB0aGlzLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBkb2MgPSBkb2N1bWVudFxuICAgICwgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnRcbiAgICAsIGJ5Q2xhc3MgPSAnZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSdcbiAgICAsIGJ5VGFnID0gJ2dldEVsZW1lbnRzQnlUYWdOYW1lJ1xuICAgICwgcVNBID0gJ3F1ZXJ5U2VsZWN0b3JBbGwnXG4gICAgLCB1c2VOYXRpdmVRU0EgPSAndXNlTmF0aXZlUVNBJ1xuICAgICwgdGFnTmFtZSA9ICd0YWdOYW1lJ1xuICAgICwgbm9kZVR5cGUgPSAnbm9kZVR5cGUnXG4gICAgLCBzZWxlY3QgLy8gbWFpbiBzZWxlY3QoKSBtZXRob2QsIGFzc2lnbiBsYXRlclxuXG4gICAgLCBpZCA9IC8jKFtcXHdcXC1dKykvXG4gICAgLCBjbGFzID0gL1xcLltcXHdcXC1dKy9nXG4gICAgLCBpZE9ubHkgPSAvXiMoW1xcd1xcLV0rKSQvXG4gICAgLCBjbGFzc09ubHkgPSAvXlxcLihbXFx3XFwtXSspJC9cbiAgICAsIHRhZ09ubHkgPSAvXihbXFx3XFwtXSspJC9cbiAgICAsIHRhZ0FuZE9yQ2xhc3MgPSAvXihbXFx3XSspP1xcLihbXFx3XFwtXSspJC9cbiAgICAsIHNwbGl0dGFibGUgPSAvKF58LClcXHMqWz5+K10vXG4gICAgLCBub3JtYWxpenIgPSAvXlxccyt8XFxzKihbLFxcc1xcK1xcfj5dfCQpXFxzKi9nXG4gICAgLCBzcGxpdHRlcnMgPSAvW1xcc1xcPlxcK1xcfl0vXG4gICAgLCBzcGxpdHRlcnNNb3JlID0gLyg/IVtcXHNcXHdcXC1cXC9cXD9cXCZcXD1cXDpcXC5cXChcXClcXCEsQCMlPD5cXHtcXH1cXCRcXCpcXF4nXCJdKlxcXXxbXFxzXFx3XFwrXFwtXSpcXCkpL1xuICAgICwgc3BlY2lhbENoYXJzID0gLyhbLiorP1xcXj0hOiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nXG4gICAgLCBzaW1wbGUgPSAvXihcXCp8W2EtejAtOV0rKT8oPzooW1xcLlxcI10rW1xcd1xcLVxcLiNdKyk/KS9cbiAgICAsIGF0dHIgPSAvXFxbKFtcXHdcXC1dKykoPzooW1xcfFxcXlxcJFxcKlxcfl0/XFw9KVsnXCJdPyhbIFxcd1xcLVxcL1xcP1xcJlxcPVxcOlxcLlxcKFxcKVxcISxAIyU8Plxce1xcfVxcJFxcKlxcXl0rKVtcIiddPyk/XFxdL1xuICAgICwgcHNldWRvID0gLzooW1xcd1xcLV0rKShcXChbJ1wiXT8oW14oKV0rKVsnXCJdP1xcKSk/L1xuICAgICwgZWFzeSA9IG5ldyBSZWdFeHAoaWRPbmx5LnNvdXJjZSArICd8JyArIHRhZ09ubHkuc291cmNlICsgJ3wnICsgY2xhc3NPbmx5LnNvdXJjZSlcbiAgICAsIGRpdmlkZXJzID0gbmV3IFJlZ0V4cCgnKCcgKyBzcGxpdHRlcnMuc291cmNlICsgJyknICsgc3BsaXR0ZXJzTW9yZS5zb3VyY2UsICdnJylcbiAgICAsIHRva2VuaXpyID0gbmV3IFJlZ0V4cChzcGxpdHRlcnMuc291cmNlICsgc3BsaXR0ZXJzTW9yZS5zb3VyY2UpXG4gICAgLCBjaHVua2VyID0gbmV3IFJlZ0V4cChzaW1wbGUuc291cmNlICsgJygnICsgYXR0ci5zb3VyY2UgKyAnKT8nICsgJygnICsgcHNldWRvLnNvdXJjZSArICcpPycpXG5cbiAgdmFyIHdhbGtlciA9IHtcbiAgICAgICcgJzogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZSAhPT0gaHRtbCAmJiBub2RlLnBhcmVudE5vZGVcbiAgICAgIH1cbiAgICAsICc+JzogZnVuY3Rpb24gKG5vZGUsIGNvbnRlc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS5wYXJlbnROb2RlID09IGNvbnRlc3RhbnQucGFyZW50Tm9kZSAmJiBub2RlLnBhcmVudE5vZGVcbiAgICAgIH1cbiAgICAsICd+JzogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS5wcmV2aW91c1NpYmxpbmdcbiAgICAgIH1cbiAgICAsICcrJzogZnVuY3Rpb24gKG5vZGUsIGNvbnRlc3RhbnQsIHAxLCBwMikge1xuICAgICAgICBpZiAoIW5vZGUpIHJldHVybiBmYWxzZVxuICAgICAgICByZXR1cm4gKHAxID0gcHJldmlvdXMobm9kZSkpICYmIChwMiA9IHByZXZpb3VzKGNvbnRlc3RhbnQpKSAmJiBwMSA9PSBwMiAmJiBwMVxuICAgICAgfVxuICAgIH1cblxuICBmdW5jdGlvbiBjYWNoZSgpIHtcbiAgICB0aGlzLmMgPSB7fVxuICB9XG4gIGNhY2hlLnByb3RvdHlwZSA9IHtcbiAgICBnOiBmdW5jdGlvbiAoaykge1xuICAgICAgcmV0dXJuIHRoaXMuY1trXSB8fCB1bmRlZmluZWRcbiAgICB9XG4gICwgczogZnVuY3Rpb24gKGssIHYsIHIpIHtcbiAgICAgIHYgPSByID8gbmV3IFJlZ0V4cCh2KSA6IHZcbiAgICAgIHJldHVybiAodGhpcy5jW2tdID0gdilcbiAgICB9XG4gIH1cblxuICB2YXIgY2xhc3NDYWNoZSA9IG5ldyBjYWNoZSgpXG4gICAgLCBjbGVhbkNhY2hlID0gbmV3IGNhY2hlKClcbiAgICAsIGF0dHJDYWNoZSA9IG5ldyBjYWNoZSgpXG4gICAgLCB0b2tlbkNhY2hlID0gbmV3IGNhY2hlKClcblxuICBmdW5jdGlvbiBjbGFzc1JlZ2V4KGMpIHtcbiAgICByZXR1cm4gY2xhc3NDYWNoZS5nKGMpIHx8IGNsYXNzQ2FjaGUucyhjLCAnKF58XFxcXHMrKScgKyBjICsgJyhcXFxccyt8JCknLCAxKVxuICB9XG5cbiAgLy8gbm90IHF1aXRlIGFzIGZhc3QgYXMgaW5saW5lIGxvb3BzIGluIG9sZGVyIGJyb3dzZXJzIHNvIGRvbid0IHVzZSBsaWJlcmFsbHlcbiAgZnVuY3Rpb24gZWFjaChhLCBmbikge1xuICAgIHZhciBpID0gMCwgbCA9IGEubGVuZ3RoXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIGZuKGFbaV0pXG4gIH1cblxuICBmdW5jdGlvbiBmbGF0dGVuKGFyKSB7XG4gICAgZm9yICh2YXIgciA9IFtdLCBpID0gMCwgbCA9IGFyLmxlbmd0aDsgaSA8IGw7ICsraSkgYXJyYXlMaWtlKGFyW2ldKSA/IChyID0gci5jb25jYXQoYXJbaV0pKSA6IChyW3IubGVuZ3RoXSA9IGFyW2ldKVxuICAgIHJldHVybiByXG4gIH1cblxuICBmdW5jdGlvbiBhcnJheWlmeShhcikge1xuICAgIHZhciBpID0gMCwgbCA9IGFyLmxlbmd0aCwgciA9IFtdXG4gICAgZm9yICg7IGkgPCBsOyBpKyspIHJbaV0gPSBhcltpXVxuICAgIHJldHVybiByXG4gIH1cblxuICBmdW5jdGlvbiBwcmV2aW91cyhuKSB7XG4gICAgd2hpbGUgKG4gPSBuLnByZXZpb3VzU2libGluZykgaWYgKG5bbm9kZVR5cGVdID09IDEpIGJyZWFrO1xuICAgIHJldHVybiBuXG4gIH1cblxuICBmdW5jdGlvbiBxKHF1ZXJ5KSB7XG4gICAgcmV0dXJuIHF1ZXJ5Lm1hdGNoKGNodW5rZXIpXG4gIH1cblxuICAvLyBjYWxsZWQgdXNpbmcgYHRoaXNgIGFzIGVsZW1lbnQgYW5kIGFyZ3VtZW50cyBmcm9tIHJlZ2V4IGdyb3VwIHJlc3VsdHMuXG4gIC8vIGdpdmVuID0+IGRpdi5oZWxsb1t0aXRsZT1cIndvcmxkXCJdOmZvbygnYmFyJylcbiAgLy8gZGl2LmhlbGxvW3RpdGxlPVwid29ybGRcIl06Zm9vKCdiYXInKSwgZGl2LCAuaGVsbG8sIFt0aXRsZT1cIndvcmxkXCJdLCB0aXRsZSwgPSwgd29ybGQsIDpmb28oJ2JhcicpLCBmb28sICgnYmFyJyksIGJhcl1cbiAgZnVuY3Rpb24gaW50ZXJwcmV0KHdob2xlLCB0YWcsIGlkc0FuZENsYXNzZXMsIHdob2xlQXR0cmlidXRlLCBhdHRyaWJ1dGUsIHF1YWxpZmllciwgdmFsdWUsIHdob2xlUHNldWRvLCBwc2V1ZG8sIHdob2xlUHNldWRvVmFsLCBwc2V1ZG9WYWwpIHtcbiAgICB2YXIgaSwgbSwgaywgbywgY2xhc3Nlc1xuICAgIGlmICh0aGlzW25vZGVUeXBlXSAhPT0gMSkgcmV0dXJuIGZhbHNlXG4gICAgaWYgKHRhZyAmJiB0YWcgIT09ICcqJyAmJiB0aGlzW3RhZ05hbWVdICYmIHRoaXNbdGFnTmFtZV0udG9Mb3dlckNhc2UoKSAhPT0gdGFnKSByZXR1cm4gZmFsc2VcbiAgICBpZiAoaWRzQW5kQ2xhc3NlcyAmJiAobSA9IGlkc0FuZENsYXNzZXMubWF0Y2goaWQpKSAmJiBtWzFdICE9PSB0aGlzLmlkKSByZXR1cm4gZmFsc2VcbiAgICBpZiAoaWRzQW5kQ2xhc3NlcyAmJiAoY2xhc3NlcyA9IGlkc0FuZENsYXNzZXMubWF0Y2goY2xhcykpKSB7XG4gICAgICBmb3IgKGkgPSBjbGFzc2VzLmxlbmd0aDsgaS0tOykgaWYgKCFjbGFzc1JlZ2V4KGNsYXNzZXNbaV0uc2xpY2UoMSkpLnRlc3QodGhpcy5jbGFzc05hbWUpKSByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKHBzZXVkbyAmJiBxd2VyeS5wc2V1ZG9zW3BzZXVkb10gJiYgIXF3ZXJ5LnBzZXVkb3NbcHNldWRvXSh0aGlzLCBwc2V1ZG9WYWwpKSByZXR1cm4gZmFsc2VcbiAgICBpZiAod2hvbGVBdHRyaWJ1dGUgJiYgIXZhbHVlKSB7IC8vIHNlbGVjdCBpcyBqdXN0IGZvciBleGlzdGFuY2Ugb2YgYXR0cmliXG4gICAgICBvID0gdGhpcy5hdHRyaWJ1dGVzXG4gICAgICBmb3IgKGsgaW4gbykge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIGspICYmIChvW2tdLm5hbWUgfHwgaykgPT0gYXR0cmlidXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAod2hvbGVBdHRyaWJ1dGUgJiYgIWNoZWNrQXR0cihxdWFsaWZpZXIsIGdldEF0dHIodGhpcywgYXR0cmlidXRlKSB8fCAnJywgdmFsdWUpKSB7XG4gICAgICAvLyBzZWxlY3QgaXMgZm9yIGF0dHJpYiBlcXVhbGl0eVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbihzKSB7XG4gICAgcmV0dXJuIGNsZWFuQ2FjaGUuZyhzKSB8fCBjbGVhbkNhY2hlLnMocywgcy5yZXBsYWNlKHNwZWNpYWxDaGFycywgJ1xcXFwkMScpKVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tBdHRyKHF1YWxpZnksIGFjdHVhbCwgdmFsKSB7XG4gICAgc3dpdGNoIChxdWFsaWZ5KSB7XG4gICAgY2FzZSAnPSc6XG4gICAgICByZXR1cm4gYWN0dWFsID09IHZhbFxuICAgIGNhc2UgJ149JzpcbiAgICAgIHJldHVybiBhY3R1YWwubWF0Y2goYXR0ckNhY2hlLmcoJ149JyArIHZhbCkgfHwgYXR0ckNhY2hlLnMoJ149JyArIHZhbCwgJ14nICsgY2xlYW4odmFsKSwgMSkpXG4gICAgY2FzZSAnJD0nOlxuICAgICAgcmV0dXJuIGFjdHVhbC5tYXRjaChhdHRyQ2FjaGUuZygnJD0nICsgdmFsKSB8fCBhdHRyQ2FjaGUucygnJD0nICsgdmFsLCBjbGVhbih2YWwpICsgJyQnLCAxKSlcbiAgICBjYXNlICcqPSc6XG4gICAgICByZXR1cm4gYWN0dWFsLm1hdGNoKGF0dHJDYWNoZS5nKHZhbCkgfHwgYXR0ckNhY2hlLnModmFsLCBjbGVhbih2YWwpLCAxKSlcbiAgICBjYXNlICd+PSc6XG4gICAgICByZXR1cm4gYWN0dWFsLm1hdGNoKGF0dHJDYWNoZS5nKCd+PScgKyB2YWwpIHx8IGF0dHJDYWNoZS5zKCd+PScgKyB2YWwsICcoPzpefFxcXFxzKyknICsgY2xlYW4odmFsKSArICcoPzpcXFxccyt8JCknLCAxKSlcbiAgICBjYXNlICd8PSc6XG4gICAgICByZXR1cm4gYWN0dWFsLm1hdGNoKGF0dHJDYWNoZS5nKCd8PScgKyB2YWwpIHx8IGF0dHJDYWNoZS5zKCd8PScgKyB2YWwsICdeJyArIGNsZWFuKHZhbCkgKyAnKC18JCknLCAxKSlcbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIC8vIGdpdmVuIGEgc2VsZWN0b3IsIGZpcnN0IGNoZWNrIGZvciBzaW1wbGUgY2FzZXMgdGhlbiBjb2xsZWN0IGFsbCBiYXNlIGNhbmRpZGF0ZSBtYXRjaGVzIGFuZCBmaWx0ZXJcbiAgZnVuY3Rpb24gX3F3ZXJ5KHNlbGVjdG9yLCBfcm9vdCkge1xuICAgIHZhciByID0gW10sIHJldCA9IFtdLCBpLCBsLCBtLCB0b2tlbiwgdGFnLCBlbHMsIGludHIsIGl0ZW0sIHJvb3QgPSBfcm9vdFxuICAgICAgLCB0b2tlbnMgPSB0b2tlbkNhY2hlLmcoc2VsZWN0b3IpIHx8IHRva2VuQ2FjaGUucyhzZWxlY3Rvciwgc2VsZWN0b3Iuc3BsaXQodG9rZW5penIpKVxuICAgICAgLCBkaXZpZGVkVG9rZW5zID0gc2VsZWN0b3IubWF0Y2goZGl2aWRlcnMpXG5cbiAgICBpZiAoIXRva2Vucy5sZW5ndGgpIHJldHVybiByXG5cbiAgICB0b2tlbiA9ICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoMCkpLnBvcCgpIC8vIGNvcHkgY2FjaGVkIHRva2VucywgdGFrZSB0aGUgbGFzdCBvbmVcbiAgICBpZiAodG9rZW5zLmxlbmd0aCAmJiAobSA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0ubWF0Y2goaWRPbmx5KSkpIHJvb3QgPSBieUlkKF9yb290LCBtWzFdKVxuICAgIGlmICghcm9vdCkgcmV0dXJuIHJcblxuICAgIGludHIgPSBxKHRva2VuKVxuICAgIC8vIGNvbGxlY3QgYmFzZSBjYW5kaWRhdGVzIHRvIGZpbHRlclxuICAgIGVscyA9IHJvb3QgIT09IF9yb290ICYmIHJvb3Rbbm9kZVR5cGVdICE9PSA5ICYmIGRpdmlkZWRUb2tlbnMgJiYgL15bK35dJC8udGVzdChkaXZpZGVkVG9rZW5zW2RpdmlkZWRUb2tlbnMubGVuZ3RoIC0gMV0pID9cbiAgICAgIGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHdoaWxlIChyb290ID0gcm9vdC5uZXh0U2libGluZykge1xuICAgICAgICAgIHJvb3Rbbm9kZVR5cGVdID09IDEgJiYgKGludHJbMV0gPyBpbnRyWzFdID09IHJvb3RbdGFnTmFtZV0udG9Mb3dlckNhc2UoKSA6IDEpICYmIChyW3IubGVuZ3RoXSA9IHJvb3QpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJcbiAgICAgIH0oW10pIDpcbiAgICAgIHJvb3RbYnlUYWddKGludHJbMV0gfHwgJyonKVxuICAgIC8vIGZpbHRlciBlbGVtZW50cyBhY2NvcmRpbmcgdG8gdGhlIHJpZ2h0LW1vc3QgcGFydCBvZiB0aGUgc2VsZWN0b3JcbiAgICBmb3IgKGkgPSAwLCBsID0gZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGl0ZW0gPSBpbnRlcnByZXQuYXBwbHkoZWxzW2ldLCBpbnRyKSkgcltyLmxlbmd0aF0gPSBpdGVtXG4gICAgfVxuICAgIGlmICghdG9rZW5zLmxlbmd0aCkgcmV0dXJuIHJcblxuICAgIC8vIGZpbHRlciBmdXJ0aGVyIGFjY29yZGluZyB0byB0aGUgcmVzdCBvZiB0aGUgc2VsZWN0b3IgKHRoZSBsZWZ0IHNpZGUpXG4gICAgZWFjaChyLCBmdW5jdGlvbiAoZSkgeyBpZiAoYW5jZXN0b3JNYXRjaChlLCB0b2tlbnMsIGRpdmlkZWRUb2tlbnMpKSByZXRbcmV0Lmxlbmd0aF0gPSBlIH0pXG4gICAgcmV0dXJuIHJldFxuICB9XG5cbiAgLy8gY29tcGFyZSBlbGVtZW50IHRvIGEgc2VsZWN0b3JcbiAgZnVuY3Rpb24gaXMoZWwsIHNlbGVjdG9yLCByb290KSB7XG4gICAgaWYgKGlzTm9kZShzZWxlY3RvcikpIHJldHVybiBlbCA9PSBzZWxlY3RvclxuICAgIGlmIChhcnJheUxpa2Uoc2VsZWN0b3IpKSByZXR1cm4gISF+ZmxhdHRlbihzZWxlY3RvcikuaW5kZXhPZihlbCkgLy8gaWYgc2VsZWN0b3IgaXMgYW4gYXJyYXksIGlzIGVsIGEgbWVtYmVyP1xuXG4gICAgdmFyIHNlbGVjdG9ycyA9IHNlbGVjdG9yLnNwbGl0KCcsJyksIHRva2VucywgZGl2aWRlZFRva2Vuc1xuICAgIHdoaWxlIChzZWxlY3RvciA9IHNlbGVjdG9ycy5wb3AoKSkge1xuICAgICAgdG9rZW5zID0gdG9rZW5DYWNoZS5nKHNlbGVjdG9yKSB8fCB0b2tlbkNhY2hlLnMoc2VsZWN0b3IsIHNlbGVjdG9yLnNwbGl0KHRva2VuaXpyKSlcbiAgICAgIGRpdmlkZWRUb2tlbnMgPSBzZWxlY3Rvci5tYXRjaChkaXZpZGVycylcbiAgICAgIHRva2VucyA9IHRva2Vucy5zbGljZSgwKSAvLyBjb3B5IGFycmF5XG4gICAgICBpZiAoaW50ZXJwcmV0LmFwcGx5KGVsLCBxKHRva2Vucy5wb3AoKSkpICYmICghdG9rZW5zLmxlbmd0aCB8fCBhbmNlc3Rvck1hdGNoKGVsLCB0b2tlbnMsIGRpdmlkZWRUb2tlbnMsIHJvb3QpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIGdpdmVuIGVsZW1lbnRzIG1hdGNoaW5nIHRoZSByaWdodC1tb3N0IHBhcnQgb2YgYSBzZWxlY3RvciwgZmlsdGVyIG91dCBhbnkgdGhhdCBkb24ndCBtYXRjaCB0aGUgcmVzdFxuICBmdW5jdGlvbiBhbmNlc3Rvck1hdGNoKGVsLCB0b2tlbnMsIGRpdmlkZWRUb2tlbnMsIHJvb3QpIHtcbiAgICB2YXIgY2FuZFxuICAgIC8vIHJlY3Vyc2l2ZWx5IHdvcmsgYmFja3dhcmRzIHRocm91Z2ggdGhlIHRva2VucyBhbmQgdXAgdGhlIGRvbSwgY292ZXJpbmcgYWxsIG9wdGlvbnNcbiAgICBmdW5jdGlvbiBjcmF3bChlLCBpLCBwKSB7XG4gICAgICB3aGlsZSAocCA9IHdhbGtlcltkaXZpZGVkVG9rZW5zW2ldXShwLCBlKSkge1xuICAgICAgICBpZiAoaXNOb2RlKHApICYmIChpbnRlcnByZXQuYXBwbHkocCwgcSh0b2tlbnNbaV0pKSkpIHtcbiAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgaWYgKGNhbmQgPSBjcmF3bChwLCBpIC0gMSwgcCkpIHJldHVybiBjYW5kXG4gICAgICAgICAgfSBlbHNlIHJldHVybiBwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChjYW5kID0gY3Jhd2woZWwsIHRva2Vucy5sZW5ndGggLSAxLCBlbCkpICYmICghcm9vdCB8fCBpc0FuY2VzdG9yKGNhbmQsIHJvb3QpKVxuICB9XG5cbiAgZnVuY3Rpb24gaXNOb2RlKGVsLCB0KSB7XG4gICAgcmV0dXJuIGVsICYmIHR5cGVvZiBlbCA9PT0gJ29iamVjdCcgJiYgKHQgPSBlbFtub2RlVHlwZV0pICYmICh0ID09IDEgfHwgdCA9PSA5KVxuICB9XG5cbiAgZnVuY3Rpb24gdW5pcShhcikge1xuICAgIHZhciBhID0gW10sIGksIGo7XG4gICAgbzpcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXIubGVuZ3RoOyArK2kpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBhLmxlbmd0aDsgKytqKSBpZiAoYVtqXSA9PSBhcltpXSkgY29udGludWUgb1xuICAgICAgYVthLmxlbmd0aF0gPSBhcltpXVxuICAgIH1cbiAgICByZXR1cm4gYVxuICB9XG5cbiAgZnVuY3Rpb24gYXJyYXlMaWtlKG8pIHtcbiAgICByZXR1cm4gKHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBpc0Zpbml0ZShvLmxlbmd0aCkpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVSb290KHJvb3QpIHtcbiAgICBpZiAoIXJvb3QpIHJldHVybiBkb2NcbiAgICBpZiAodHlwZW9mIHJvb3QgPT0gJ3N0cmluZycpIHJldHVybiBxd2VyeShyb290KVswXVxuICAgIGlmICghcm9vdFtub2RlVHlwZV0gJiYgYXJyYXlMaWtlKHJvb3QpKSByZXR1cm4gcm9vdFswXVxuICAgIHJldHVybiByb290XG4gIH1cblxuICBmdW5jdGlvbiBieUlkKHJvb3QsIGlkLCBlbCkge1xuICAgIC8vIGlmIGRvYywgcXVlcnkgb24gaXQsIGVsc2UgcXVlcnkgdGhlIHBhcmVudCBkb2Mgb3IgaWYgYSBkZXRhY2hlZCBmcmFnbWVudCByZXdyaXRlIHRoZSBxdWVyeSBhbmQgcnVuIG9uIHRoZSBmcmFnbWVudFxuICAgIHJldHVybiByb290W25vZGVUeXBlXSA9PT0gOSA/IHJvb3QuZ2V0RWxlbWVudEJ5SWQoaWQpIDpcbiAgICAgIHJvb3Qub3duZXJEb2N1bWVudCAmJlxuICAgICAgICAoKChlbCA9IHJvb3Qub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkpICYmIGlzQW5jZXN0b3IoZWwsIHJvb3QpICYmIGVsKSB8fFxuICAgICAgICAgICghaXNBbmNlc3Rvcihyb290LCByb290Lm93bmVyRG9jdW1lbnQpICYmIHNlbGVjdCgnW2lkPVwiJyArIGlkICsgJ1wiXScsIHJvb3QpWzBdKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHF3ZXJ5KHNlbGVjdG9yLCBfcm9vdCkge1xuICAgIHZhciBtLCBlbCwgcm9vdCA9IG5vcm1hbGl6ZVJvb3QoX3Jvb3QpXG5cbiAgICAvLyBlYXN5LCBmYXN0IGNhc2VzIHRoYXQgd2UgY2FuIGRpc3BhdGNoIHdpdGggc2ltcGxlIERPTSBjYWxsc1xuICAgIGlmICghcm9vdCB8fCAhc2VsZWN0b3IpIHJldHVybiBbXVxuICAgIGlmIChzZWxlY3RvciA9PT0gd2luZG93IHx8IGlzTm9kZShzZWxlY3RvcikpIHtcbiAgICAgIHJldHVybiAhX3Jvb3QgfHwgKHNlbGVjdG9yICE9PSB3aW5kb3cgJiYgaXNOb2RlKHJvb3QpICYmIGlzQW5jZXN0b3Ioc2VsZWN0b3IsIHJvb3QpKSA/IFtzZWxlY3Rvcl0gOiBbXVxuICAgIH1cbiAgICBpZiAoc2VsZWN0b3IgJiYgYXJyYXlMaWtlKHNlbGVjdG9yKSkgcmV0dXJuIGZsYXR0ZW4oc2VsZWN0b3IpXG4gICAgaWYgKG0gPSBzZWxlY3Rvci5tYXRjaChlYXN5KSkge1xuICAgICAgaWYgKG1bMV0pIHJldHVybiAoZWwgPSBieUlkKHJvb3QsIG1bMV0pKSA/IFtlbF0gOiBbXVxuICAgICAgaWYgKG1bMl0pIHJldHVybiBhcnJheWlmeShyb290W2J5VGFnXShtWzJdKSlcbiAgICAgIGlmIChoYXNCeUNsYXNzICYmIG1bM10pIHJldHVybiBhcnJheWlmeShyb290W2J5Q2xhc3NdKG1bM10pKVxuICAgIH1cblxuICAgIHJldHVybiBzZWxlY3Qoc2VsZWN0b3IsIHJvb3QpXG4gIH1cblxuICAvLyB3aGVyZSB0aGUgcm9vdCBpcyBub3QgZG9jdW1lbnQgYW5kIGEgcmVsYXRpb25zaGlwIHNlbGVjdG9yIGlzIGZpcnN0IHdlIGhhdmUgdG9cbiAgLy8gZG8gc29tZSBhd2t3YXJkIGFkanVzdG1lbnRzIHRvIGdldCBpdCB0byB3b3JrLCBldmVuIHdpdGggcVNBXG4gIGZ1bmN0aW9uIGNvbGxlY3RTZWxlY3Rvcihyb290LCBjb2xsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHMpIHtcbiAgICAgIHZhciBvaWQsIG5pZFxuICAgICAgaWYgKHNwbGl0dGFibGUudGVzdChzKSkge1xuICAgICAgICBpZiAocm9vdFtub2RlVHlwZV0gIT09IDkpIHtcbiAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGVsIGhhcyBhbiBpZCwgcmV3cml0ZSB0aGUgcXVlcnksIHNldCByb290IHRvIGRvYyBhbmQgcnVuIGl0XG4gICAgICAgICAgaWYgKCEobmlkID0gb2lkID0gcm9vdC5nZXRBdHRyaWJ1dGUoJ2lkJykpKSByb290LnNldEF0dHJpYnV0ZSgnaWQnLCBuaWQgPSAnX19xd2VyeW1ldXBzY290dHknKVxuICAgICAgICAgIHMgPSAnW2lkPVwiJyArIG5pZCArICdcIl0nICsgcyAvLyBhdm9pZCBieUlkIGFuZCBhbGxvdyB1cyB0byBtYXRjaCBjb250ZXh0IGVsZW1lbnRcbiAgICAgICAgICBjb2xsZWN0b3Iocm9vdC5wYXJlbnROb2RlIHx8IHJvb3QsIHMsIHRydWUpXG4gICAgICAgICAgb2lkIHx8IHJvb3QucmVtb3ZlQXR0cmlidXRlKCdpZCcpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcy5sZW5ndGggJiYgY29sbGVjdG9yKHJvb3QsIHMsIGZhbHNlKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpc0FuY2VzdG9yID0gJ2NvbXBhcmVEb2N1bWVudFBvc2l0aW9uJyBpbiBodG1sID9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gKGNvbnRhaW5lci5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50KSAmIDE2KSA9PSAxNlxuICAgIH0gOiAnY29udGFpbnMnIGluIGh0bWwgP1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIpIHtcbiAgICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lcltub2RlVHlwZV0gPT09IDkgfHwgY29udGFpbmVyID09IHdpbmRvdyA/IGh0bWwgOiBjb250YWluZXJcbiAgICAgIHJldHVybiBjb250YWluZXIgIT09IGVsZW1lbnQgJiYgY29udGFpbmVyLmNvbnRhaW5zKGVsZW1lbnQpXG4gICAgfSA6XG4gICAgZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lcikge1xuICAgICAgd2hpbGUgKGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUpIGlmIChlbGVtZW50ID09PSBjb250YWluZXIpIHJldHVybiAxXG4gICAgICByZXR1cm4gMFxuICAgIH1cbiAgLCBnZXRBdHRyID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZGV0ZWN0IGJ1Z2d5IElFIHNyYy9ocmVmIGdldEF0dHJpYnV0ZSgpIGNhbGxcbiAgICAgIHZhciBlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3AnKVxuICAgICAgcmV0dXJuICgoZS5pbm5lckhUTUwgPSAnPGEgaHJlZj1cIiN4XCI+eDwvYT4nKSAmJiBlLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCdocmVmJykgIT0gJyN4JykgP1xuICAgICAgICBmdW5jdGlvbiAoZSwgYSkge1xuICAgICAgICAgIHJldHVybiBhID09PSAnY2xhc3MnID8gZS5jbGFzc05hbWUgOiAoYSA9PT0gJ2hyZWYnIHx8IGEgPT09ICdzcmMnKSA/XG4gICAgICAgICAgICBlLmdldEF0dHJpYnV0ZShhLCAyKSA6IGUuZ2V0QXR0cmlidXRlKGEpXG4gICAgICAgIH0gOlxuICAgICAgICBmdW5jdGlvbiAoZSwgYSkgeyByZXR1cm4gZS5nZXRBdHRyaWJ1dGUoYSkgfVxuICAgIH0oKVxuICAsIGhhc0J5Q2xhc3MgPSAhIWRvY1tieUNsYXNzXVxuICAgIC8vIGhhcyBuYXRpdmUgcVNBIHN1cHBvcnRcbiAgLCBoYXNRU0EgPSBkb2MucXVlcnlTZWxlY3RvciAmJiBkb2NbcVNBXVxuICAgIC8vIHVzZSBuYXRpdmUgcVNBXG4gICwgc2VsZWN0UVNBID0gZnVuY3Rpb24gKHNlbGVjdG9yLCByb290KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW10sIHNzLCBlXG4gICAgICB0cnkge1xuICAgICAgICBpZiAocm9vdFtub2RlVHlwZV0gPT09IDkgfHwgIXNwbGl0dGFibGUudGVzdChzZWxlY3RvcikpIHtcbiAgICAgICAgICAvLyBtb3N0IHdvcmsgaXMgZG9uZSByaWdodCBoZXJlLCBkZWZlciB0byBxU0FcbiAgICAgICAgICByZXR1cm4gYXJyYXlpZnkocm9vdFtxU0FdKHNlbGVjdG9yKSlcbiAgICAgICAgfVxuICAgICAgICAvLyBzcGVjaWFsIGNhc2Ugd2hlcmUgd2UgbmVlZCB0aGUgc2VydmljZXMgb2YgYGNvbGxlY3RTZWxlY3RvcigpYFxuICAgICAgICBlYWNoKHNzID0gc2VsZWN0b3Iuc3BsaXQoJywnKSwgY29sbGVjdFNlbGVjdG9yKHJvb3QsIGZ1bmN0aW9uIChjdHgsIHMpIHtcbiAgICAgICAgICBlID0gY3R4W3FTQV0ocylcbiAgICAgICAgICBpZiAoZS5sZW5ndGggPT0gMSkgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gZS5pdGVtKDApXG4gICAgICAgICAgZWxzZSBpZiAoZS5sZW5ndGgpIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoYXJyYXlpZnkoZSkpXG4gICAgICAgIH0pKVxuICAgICAgICByZXR1cm4gc3MubGVuZ3RoID4gMSAmJiByZXN1bHQubGVuZ3RoID4gMSA/IHVuaXEocmVzdWx0KSA6IHJlc3VsdFxuICAgICAgfSBjYXRjaCAoZXgpIHsgfVxuICAgICAgcmV0dXJuIHNlbGVjdE5vbk5hdGl2ZShzZWxlY3Rvciwgcm9vdClcbiAgICB9XG4gICAgLy8gbm8gbmF0aXZlIHNlbGVjdG9yIHN1cHBvcnRcbiAgLCBzZWxlY3ROb25OYXRpdmUgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHJvb3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXSwgaXRlbXMsIG0sIGksIGwsIHIsIHNzXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2Uobm9ybWFsaXpyLCAnJDEnKVxuICAgICAgaWYgKG0gPSBzZWxlY3Rvci5tYXRjaCh0YWdBbmRPckNsYXNzKSkge1xuICAgICAgICByID0gY2xhc3NSZWdleChtWzJdKVxuICAgICAgICBpdGVtcyA9IHJvb3RbYnlUYWddKG1bMV0gfHwgJyonKVxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHIudGVzdChpdGVtc1tpXS5jbGFzc05hbWUpKSByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBpdGVtc1tpXVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cbiAgICAgIC8vIG1vcmUgY29tcGxleCBzZWxlY3RvciwgZ2V0IGBfcXdlcnkoKWAgdG8gZG8gdGhlIHdvcmsgZm9yIHVzXG4gICAgICBlYWNoKHNzID0gc2VsZWN0b3Iuc3BsaXQoJywnKSwgY29sbGVjdFNlbGVjdG9yKHJvb3QsIGZ1bmN0aW9uIChjdHgsIHMsIHJld3JpdGUpIHtcbiAgICAgICAgciA9IF9xd2VyeShzLCBjdHgpXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSByLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmIChjdHhbbm9kZVR5cGVdID09PSA5IHx8IHJld3JpdGUgfHwgaXNBbmNlc3RvcihyW2ldLCByb290KSkgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcltpXVxuICAgICAgICB9XG4gICAgICB9KSlcbiAgICAgIHJldHVybiBzcy5sZW5ndGggPiAxICYmIHJlc3VsdC5sZW5ndGggPiAxID8gdW5pcShyZXN1bHQpIDogcmVzdWx0XG4gICAgfVxuICAsIGNvbmZpZ3VyZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAvLyBjb25maWdOYXRpdmVRU0E6IHVzZSBmdWxseS1pbnRlcm5hbCBzZWxlY3RvciBvciBuYXRpdmUgcVNBIHdoZXJlIHByZXNlbnRcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1t1c2VOYXRpdmVRU0FdICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgc2VsZWN0ID0gIW9wdGlvbnNbdXNlTmF0aXZlUVNBXSA/IHNlbGVjdE5vbk5hdGl2ZSA6IGhhc1FTQSA/IHNlbGVjdFFTQSA6IHNlbGVjdE5vbk5hdGl2ZVxuICAgIH1cblxuICBjb25maWd1cmUoeyB1c2VOYXRpdmVRU0E6IHRydWUgfSlcblxuICBxd2VyeS5jb25maWd1cmUgPSBjb25maWd1cmVcbiAgcXdlcnkudW5pcSA9IHVuaXFcbiAgcXdlcnkuaXMgPSBpc1xuICBxd2VyeS5wc2V1ZG9zID0ge31cblxuICByZXR1cm4gcXdlcnlcbn0pO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAqIFRyYXZlcnN0eTogQSBET00gY29sbGVjdGlvbiBtYW5hZ2VtZW50IGFuZCB0cmF2ZXJzYWwgdXRpbGl0eVxuICAqIChjKSBSb2QgVmFnZyAoQHJ2YWdnKSAyMDEyXG4gICogaHR0cHM6Ly9naXRodWIuY29tL3J2YWdnL3RyYXZlcnN0eVxuICAqIExpY2Vuc2U6IE1JVFxuICAqL1xuXG4oZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQsIGRlZmluaXRpb24pIHtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKClcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG4gICAgZGVmaW5lKGRlZmluaXRpb24pXG4gIGVsc2VcbiAgICBjb250ZXh0W25hbWVdID0gZGVmaW5pdGlvbigpXG59KSgndHJhdmVyc3R5JywgdGhpcywgZnVuY3Rpb24gKCkge1xuXG4gIHZhciBjb250ZXh0ID0gdGhpc1xuICAgICwgb2xkID0gY29udGV4dC50cmF2ZXJzdHlcbiAgICAsIGRvYyA9IHdpbmRvdy5kb2N1bWVudFxuICAgICwgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnRcbiAgICAsIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuICAgICwgQXAgPSBBcnJheS5wcm90b3R5cGVcbiAgICAsIHNsaWNlID0gQXAuc2xpY2VcbiAgICAgIC8vIGZlYXR1cmUgdGVzdCB0byBmaW5kIG5hdGl2ZSBtYXRjaGVzU2VsZWN0b3IoKVxuICAgICwgbWF0Y2hlc1NlbGVjdG9yID0gKGZ1bmN0aW9uIChlbCwgcGZ4LCBuYW1lLCBpLCBtcykge1xuICAgICAgICB3aGlsZSAoaSA8IHBmeC5sZW5ndGgpXG4gICAgICAgICAgaWYgKGVsW21zID0gcGZ4W2krK10gKyBuYW1lXSlcbiAgICAgICAgICAgIHJldHVybiBtc1xuICAgICAgfShodG1sLCBbICdtc00nLCAnd2Via2l0TScsICdtb3pNJywgJ29NJywgJ20nIF0sICdhdGNoZXNTZWxlY3RvcicsIDApKVxuXG4gICAgLCBLZmFsc2UgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgICAsIGlzTnVtYmVyID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwobykgPT09ICdbb2JqZWN0IE51bWJlcl0nXG4gICAgICB9XG5cbiAgICAsIGlzU3RyaW5nID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwobykgPT09ICdbb2JqZWN0IFN0cmluZ10nXG4gICAgICB9XG5cbiAgICAsIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAobykge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuICAgICAgfVxuXG4gICAgLCBpc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiBvID09PSB2b2lkIDBcbiAgICAgIH1cblxuICAgICwgaXNFbGVtZW50ID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIG8gJiYgby5ub2RlVHlwZSA9PT0gMVxuICAgICAgfVxuXG4gICAgICAvLyBmaWd1cmUgb3V0IHdoaWNoIGFyZ3VtZW50LCBpZiBhbnksIGlzIG91ciAnaW5kZXgnXG4gICAgLCBnZXRJbmRleCA9IGZ1bmN0aW9uIChzZWxlY3RvciwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzVW5kZWZpbmVkKHNlbGVjdG9yKSAmJiAhaXNOdW1iZXIoaW5kZXgpID8gMCA6XG4gICAgICAgICAgaXNOdW1iZXIoc2VsZWN0b3IpID8gc2VsZWN0b3IgOiBpc051bWJlcihpbmRleCkgPyBpbmRleCA6IG51bGxcbiAgICAgIH1cblxuICAgICAgLy8gZmlndXJlIG91dCB3aGljaCBhcmd1bWVudCwgaWYgYW55LCBpcyBvdXIgJ3NlbGVjdG9yJ1xuICAgICwgZ2V0U2VsZWN0b3IgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogJyonXG4gICAgICB9XG5cbiAgICAsIG5hdGl2ZVNlbGVjdG9yRmluZCA9IGZ1bmN0aW9uIChzZWxlY3RvciwgZWwpIHtcbiAgICAgICAgcmV0dXJuIHNsaWNlLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciksIDApXG4gICAgICB9XG5cbiAgICAsIG5hdGl2ZVNlbGVjdG9yTWF0Y2hlcyA9IGZ1bmN0aW9uIChzZWxlY3RvciwgZWwpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yID09PSAnKicgfHwgZWxbbWF0Y2hlc1NlbGVjdG9yXShzZWxlY3RvcilcbiAgICAgIH1cblxuICAgICwgc2VsZWN0b3JGaW5kID0gbmF0aXZlU2VsZWN0b3JGaW5kXG5cbiAgICAsIHNlbGVjdG9yTWF0Y2hlcyA9IG5hdGl2ZVNlbGVjdG9yTWF0Y2hlc1xuXG4gICAgICAvLyB1c2VkIGluIHRoZSBjYXNlIHdoZXJlIG91ciBzZWxlY3RvciBlbmdpbmUgZG9lcyBvdXQtb2Ytb3JkZXIgZWxlbWVudCByZXR1cm5zIGZvclxuICAgICAgLy8gZ3JvdXBlZCBzZWxlY3RvcnMsIGUuZy4gJy5jbGFzcywgdGFnJywgd2UgbmVlZCBvdXIgZWxlbWVudHMgaW4gZG9jdW1lbnQtb3JkZXJcbiAgICAgIC8vIHNvIHdlIGRvIGl0IG91cnNlbHZlcyBpZiBuZWVkIGJlXG4gICAgLCBjcmVhdGVVbm9yZGVyZWRFbmdpbmVTZWxlY3RvckZpbmQgPSBmdW5jdGlvbihlbmdpbmVTZWxlY3QsIHNlbGVjdG9yTWF0Y2hlcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNlbGVjdG9yLCBlbCkge1xuICAgICAgICAgIGlmICgvLC8udGVzdChzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHZhciByZXQgPSBbXSwgaSA9IC0xLCBlbHMgPSBlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpXG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgZWxzLmxlbmd0aClcbiAgICAgICAgICAgICAgaWYgKGlzRWxlbWVudChlbHNbaV0pICYmIHNlbGVjdG9yTWF0Y2hlcyhzZWxlY3RvciwgZWxzW2ldKSlcbiAgICAgICAgICAgICAgICByZXQucHVzaChlbHNbaV0pXG4gICAgICAgICAgICByZXR1cm4gcmV0XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBlbmdpbmVTZWxlY3Qoc2VsZWN0b3IsIGVsKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGlzICdlbGVtZW50JyB1bmRlcm5lYXRoICdjb250YWluZXInIHNvbWV3aGVyZVxuICAgICwgaXNBbmNlc3RvciA9ICdjb21wYXJlRG9jdW1lbnRQb3NpdGlvbicgaW4gaHRtbFxuICAgICAgICA/IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoY29udGFpbmVyLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQpICYgMTYpID09IDE2XG4gICAgICAgICAgfVxuICAgICAgICA6ICdjb250YWlucycgaW4gaHRtbFxuICAgICAgICAgID8gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lcikge1xuICAgICAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIubm9kZVR5cGUgPT09IDkgfHwgY29udGFpbmVyID09IHdpbmRvdyA/IGh0bWwgOiBjb250YWluZXJcbiAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lciAhPT0gZWxlbWVudCAmJiBjb250YWluZXIuY29udGFpbnMoZWxlbWVudClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIpIHsgLy8gb2xkIHNtZWxseSBicm93c2VyXG4gICAgICAgICAgICAgIHdoaWxlIChlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ID09PSBjb250YWluZXIpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgICAgfVxuXG4gICAgICAvLyByZXR1cm4gYW4gYXJyYXkgY29udGFpbmluZyBvbmx5IHVuaXF1ZSBlbGVtZW50c1xuICAgICwgdW5pcXVlID0gZnVuY3Rpb24gKGFyKSB7XG4gICAgICAgIHZhciBhID0gW10sIGkgPSAtMSwgaiwgaGFzXG4gICAgICAgIHdoaWxlICgrK2kgPCBhci5sZW5ndGgpIHtcbiAgICAgICAgICBqID0gLTFcbiAgICAgICAgICBoYXMgPSBmYWxzZVxuICAgICAgICAgIHdoaWxlICgrK2ogPCBhLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGFbal0gPT09IGFyW2ldKSB7XG4gICAgICAgICAgICAgIGhhcyA9IHRydWVcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFoYXMpXG4gICAgICAgICAgICBhLnB1c2goYXJbaV0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFcbiAgICAgIH1cblxuICAgICAgLy8gZm9yIGVhY2ggZWxlbWVudCBvZiAnZWxzJyBleGVjdXRlICdmbicgdG8gZ2V0IGFuIGFycmF5IG9mIGVsZW1lbnRzIHRvIGNvbGxlY3RcbiAgICAsIGNvbGxlY3QgPSBmdW5jdGlvbiAoZWxzLCBmbikge1xuICAgICAgICB2YXIgcmV0ID0gW10sIHJlcywgaSA9IDAsIGosIGwgPSBlbHMubGVuZ3RoLCBsMlxuICAgICAgICB3aGlsZSAoaSA8IGwpIHtcbiAgICAgICAgICBqID0gMFxuICAgICAgICAgIGwyID0gKHJlcyA9IGZuKGVsc1tpXSwgaSsrKSkubGVuZ3RoXG4gICAgICAgICAgd2hpbGUgKGogPCBsMilcbiAgICAgICAgICAgIHJldC5wdXNoKHJlc1tqKytdKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRcbiAgICAgIH1cblxuICAgICAvLyBnZW5lcmljIERPTSBuYXZpZ2F0b3IgdG8gbW92ZSBtdWx0aXBsZSBlbGVtZW50cyBhcm91bmQgdGhlIERPTVxuICAgLCBtb3ZlID0gZnVuY3Rpb24gKGVscywgbWV0aG9kLCBzZWxlY3RvciwgaW5kZXgsIGZpbHRlckZuKSB7XG4gICAgICAgIGluZGV4ID0gZ2V0SW5kZXgoc2VsZWN0b3IsIGluZGV4KVxuICAgICAgICBzZWxlY3RvciA9IGdldFNlbGVjdG9yKHNlbGVjdG9yKVxuICAgICAgICByZXR1cm4gY29sbGVjdChlbHNcbiAgICAgICAgICAsIGZ1bmN0aW9uIChlbCwgZWxpbmQpIHtcbiAgICAgICAgICAgICAgdmFyIGkgPSBpbmRleCB8fCAwLCByZXQgPSBbXVxuICAgICAgICAgICAgICBpZiAoIWZpbHRlckZuKVxuICAgICAgICAgICAgICAgIGVsID0gZWxbbWV0aG9kXVxuICAgICAgICAgICAgICB3aGlsZSAoZWwgJiYgKGluZGV4ID09PSBudWxsIHx8IGkgPj0gMCkpIHtcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgbm9uLWVsZW1lbnRzLCBvbmx5IGNvbnNpZGVyIHNlbGVjdG9yLW1hdGNoaW5nIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIGJvdGggdGhlIGluZGV4IGFuZCBuby1pbmRleCAoc2VsZWN0b3Itb25seSkgY2FzZXNcbiAgICAgICAgICAgICAgICBpZiAoaXNFbGVtZW50KGVsKVxuICAgICAgICAgICAgICAgICAgICAmJiAoIWZpbHRlckZuIHx8IGZpbHRlckZuID09PSB0cnVlIHx8IGZpbHRlckZuKGVsLCBlbGluZCkpXG4gICAgICAgICAgICAgICAgICAgICYmIHNlbGVjdG9yTWF0Y2hlcyhzZWxlY3RvciwgZWwpXG4gICAgICAgICAgICAgICAgICAgICYmIChpbmRleCA9PT0gbnVsbCB8fCBpLS0gPT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAvLyB0aGlzIGNvbmNhdCB2cyBwdXNoIGlzIHRvIG1ha2Ugc3VyZSB3ZSBhZGQgZWxlbWVudHMgdG8gdGhlIHJlc3VsdCBhcnJheVxuICAgICAgICAgICAgICAgICAgLy8gaW4gcmV2ZXJzZSBvcmRlciB3aGVuIGRvaW5nIGEgcHJldmlvdXMoc2VsZWN0b3IpIGFuZCB1cChzZWxlY3RvcilcbiAgICAgICAgICAgICAgICAgIGluZGV4ID09PSBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgJiYgbWV0aG9kICE9ICduZXh0U2libGluZydcbiAgICAgICAgICAgICAgICAgICAgICAmJiBtZXRob2QgIT0gJ3BhcmVudE5vZGUnXG4gICAgICAgICAgICAgICAgICAgID8gcmV0LnVuc2hpZnQoZWwpXG4gICAgICAgICAgICAgICAgICAgIDogcmV0LnB1c2goZWwpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsID0gZWxbbWV0aG9kXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICAvLyBnaXZlbiBhbiBpbmRleCAmIGxlbmd0aCwgcmV0dXJuIGEgJ2ZpeGVkJyBpbmRleCwgZml4ZXMgbm9uLW51bWJlcnMgJiBuZWF0aXZlIGluZGV4ZXNcbiAgICAsIGVxSW5kZXggPSBmdW5jdGlvbiAobGVuZ3RoLCBpbmRleCwgZGVmKSB7XG4gICAgICAgIGlmIChpbmRleCA8IDApXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGggKyBpbmRleFxuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IGxlbmd0aClcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICByZXR1cm4gIWluZGV4ICYmIGluZGV4ICE9PSAwID8gZGVmIDogaW5kZXhcbiAgICAgIH1cblxuICAgICAgLy8gY29sbGVjdCBlbGVtZW50cyBvZiBhbiBhcnJheSB0aGF0IG1hdGNoIGEgZmlsdGVyIGZ1bmN0aW9uXG4gICAgLCBmaWx0ZXIgPSBmdW5jdGlvbiAoZWxzLCBmbikge1xuICAgICAgICB2YXIgYXJyID0gW10sIGkgPSAwLCBsID0gZWxzLmxlbmd0aFxuICAgICAgICBmb3IgKDsgaSA8IGw7IGkrKylcbiAgICAgICAgICBpZiAoZm4oZWxzW2ldLCBpKSlcbiAgICAgICAgICAgIGFyci5wdXNoKGVsc1tpXSlcbiAgICAgICAgcmV0dXJuIGFyclxuICAgICAgfVxuXG4gICAgICAvLyBjcmVhdGUgYSBmaWx0ZXIgZnVuY3Rpb24sIGZvciB1c2UgYnkgZmlsdGVyKCksIGlzKCkgJiBub3QoKVxuICAgICAgLy8gYWxsb3dzIHRoZSBhcmd1bWVudCB0byBiZSBhbiBlbGVtZW50LCBhIGZ1bmN0aW9uIG9yIGEgc2VsZWN0b3JcbiAgICAsIGZpbHRlckZuID0gZnVuY3Rpb24gKHNsZm4pIHtcbiAgICAgICAgdmFyIHRvXG4gICAgICAgIHJldHVybiBpc0VsZW1lbnQoc2xmbilcbiAgICAgICAgICA/IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwgPT09IHNsZm4gfVxuICAgICAgICAgIDogKHRvID0gdHlwZW9mIHNsZm4pID09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKGVsLCBpKSB7IHJldHVybiBzbGZuLmNhbGwoZWwsIGkpIH1cbiAgICAgICAgICAgIDogdG8gPT0gJ3N0cmluZycgJiYgc2xmbi5sZW5ndGhcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHNlbGVjdG9yTWF0Y2hlcyhzbGZuLCBlbCkgfVxuICAgICAgICAgICAgICA6IEtmYWxzZVxuICAgICAgfVxuXG4gICAgICAvLyBmbiA9ICFmblxuICAgICwgaW52ID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuICFmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICwgdHJhdmVyc3R5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gVChlbHMpIHtcbiAgICAgICAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICAgICAgICBpZiAoZWxzKSB7XG4gICAgICAgICAgICBlbHMgPSB1bmlxdWUoIWVscy5ub2RlVHlwZSAmJiAhaXNVbmRlZmluZWQoZWxzLmxlbmd0aCkgPyBlbHMgOiBbIGVscyBdKVxuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmxlbmd0aCA9IGVscy5sZW5ndGhcbiAgICAgICAgICAgIHdoaWxlIChpLS0pXG4gICAgICAgICAgICAgIHRoaXNbaV0gPSBlbHNbaV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBULnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIGRvd246IGZ1bmN0aW9uIChzZWxlY3RvciwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgaW5kZXggPSBnZXRJbmRleChzZWxlY3RvciwgaW5kZXgpXG4gICAgICAgICAgICAgIHNlbGVjdG9yID0gZ2V0U2VsZWN0b3Ioc2VsZWN0b3IpXG4gICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzdHkoY29sbGVjdCh0aGlzXG4gICAgICAgICAgICAgICAgLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBzZWxlY3RvckZpbmQoc2VsZWN0b3IsIGVsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXggPT09IG51bGwgPyBmIDogKFsgZltpbmRleF0gXSB8fCBbXSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLCB1cDogZnVuY3Rpb24gKHNlbGVjdG9yLCBpbmRleCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJhdmVyc3R5KG1vdmUodGhpcywgJ3BhcmVudE5vZGUnLCBzZWxlY3RvciwgaW5kZXgpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLCBwYXJlbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBULnByb3RvdHlwZS51cC5hcHBseSh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzIDogWyAnKicgXSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICwgY2xvc2VzdDogZnVuY3Rpb24gKHNlbGVjdG9yLCBpbmRleCkge1xuICAgICAgICAgICAgICBpZiAoaXNOdW1iZXIoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBzZWxlY3RvclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gJyonXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaW5nKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzdHkoW10pXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzTnVtYmVyKGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzdHkobW92ZSh0aGlzLCAncGFyZW50Tm9kZScsIHNlbGVjdG9yLCBpbmRleCwgdHJ1ZSkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAsIHByZXZpb3VzOiBmdW5jdGlvbiAoc2VsZWN0b3IsIGluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzdHkobW92ZSh0aGlzLCAncHJldmlvdXNTaWJsaW5nJywgc2VsZWN0b3IsIGluZGV4KSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICwgbmV4dDogZnVuY3Rpb24gKHNlbGVjdG9yLCBpbmRleCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJhdmVyc3R5KG1vdmUodGhpcywgJ25leHRTaWJsaW5nJywgc2VsZWN0b3IsIGluZGV4KSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICwgc2libGluZ3M6IGZ1bmN0aW9uIChzZWxlY3RvciwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgICAgICAgICAgICAgLCBhcnIgPSBzbGljZS5jYWxsKHRoaXMsIDApXG4gICAgICAgICAgICAgICAgLCBpID0gMCwgbCA9IGFyci5sZW5ndGhcblxuICAgICAgICAgICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGFycltpXSA9IGFycltpXS5wYXJlbnROb2RlLmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgICB3aGlsZSAoIWlzRWxlbWVudChhcnJbaV0pKVxuICAgICAgICAgICAgICAgICAgYXJyW2ldID0gYXJyW2ldLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQoc2VsZWN0b3IpKVxuICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gJyonXG5cbiAgICAgICAgICAgICAgcmV0dXJuIHRyYXZlcnN0eShtb3ZlKGFyciwgJ25leHRTaWJsaW5nJywgc2VsZWN0b3IgfHwgJyonLCBpbmRleFxuICAgICAgICAgICAgICAgICAgICAsIGZ1bmN0aW9uIChlbCwgaSkgeyByZXR1cm4gZWwgIT09IHNlbGZbaV0gfSAvLyBmaWx0ZXJcbiAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAsIGNoaWxkcmVuOiBmdW5jdGlvbiAoc2VsZWN0b3IsIGluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzdHkobW92ZShULnByb3RvdHlwZS5kb3duLmNhbGwodGhpcyksICduZXh0U2libGluZycsIHNlbGVjdG9yIHx8ICcqJywgaW5kZXgsIHRydWUpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLCBmaXJzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gVC5wcm90b3R5cGUuZXEuY2FsbCh0aGlzLCAwKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLCBsYXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBULnByb3RvdHlwZS5lcS5jYWxsKHRoaXMsIC0xKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLCBlcTogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzdHkodGhpcy5nZXQoaW5kZXgpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLCBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpc1tlcUluZGV4KHRoaXMubGVuZ3RoLCBpbmRleCwgMCldXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGEgY3JhenkgbWFuIHdyb3RlIHRoaXMsIGRvbid0IHRyeSB0byB1bmRlcnN0YW5kIGl0LCBzZWUgdGhlIHRlc3RzXG4gICAgICAgICAgLCBzbGljZTogZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSBlbmQsIGwgPSB0aGlzLmxlbmd0aCwgYXJyID0gW11cbiAgICAgICAgICAgICAgc3RhcnQgPSBlcUluZGV4KGwsIE1hdGgubWF4KC10aGlzLmxlbmd0aCwgc3RhcnQpLCAwKVxuICAgICAgICAgICAgICBlID0gZXFJbmRleChlbmQgPCAwID8gbCA6IGwgKyAxLCBlbmQsIGwpXG4gICAgICAgICAgICAgIGVuZCA9IGUgPT09IG51bGwgfHwgZSA+IGwgPyBlbmQgPCAwID8gMCA6IGwgOiBlXG4gICAgICAgICAgICAgIHdoaWxlIChzdGFydCAhPT0gbnVsbCAmJiBzdGFydCA8IGVuZClcbiAgICAgICAgICAgICAgICBhcnIucHVzaCh0aGlzW3N0YXJ0KytdKVxuICAgICAgICAgICAgICByZXR1cm4gdHJhdmVyc3R5KGFycilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICwgZmlsdGVyOiBmdW5jdGlvbiAoc2xmbikge1xuICAgICAgICAgICAgICByZXR1cm4gdHJhdmVyc3R5KGZpbHRlcih0aGlzLCBmaWx0ZXJGbihzbGZuKSkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAsIG5vdDogZnVuY3Rpb24gKHNsZm4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRyYXZlcnN0eShmaWx0ZXIodGhpcywgaW52KGZpbHRlckZuKHNsZm4pKSkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNpbWlsYXIgdG8gZmlsdGVyKCkgYnV0IGNhcmVzIGFib3V0IGRlc2NlbmRlbnQgZWxlbWVudHNcbiAgICAgICAgICAsIGhhczogZnVuY3Rpb24gKHNsZWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRyYXZlcnN0eShmaWx0ZXIoXG4gICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgLCBpc0VsZW1lbnQoc2xlbClcbiAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGlzQW5jZXN0b3Ioc2xlbCwgZWwpIH1cbiAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2Ygc2xlbCA9PSAnc3RyaW5nJyAmJiBzbGVsLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKGVsKSB7IHJldHVybiBzZWxlY3RvckZpbmQoc2xlbCwgZWwpLmxlbmd0aCB9IC8vVE9ETzogcGVyZm9ybWFuY2VcbiAgICAgICAgICAgICAgICAgICAgICA6IEtmYWxzZVxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBzYW1lIGFzIGZpbHRlcigpIGJ1dCByZXR1cm4gYSBib29sZWFuIHNvIHF1aWNrLXJldHVybiBhZnRlciBmaXJzdCBzdWNjZXNzZnVsIGZpbmRcbiAgICAgICAgICAsIGlzOiBmdW5jdGlvbiAoc2xmbikge1xuICAgICAgICAgICAgICB2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aFxuICAgICAgICAgICAgICAgICwgZm4gPSBmaWx0ZXJGbihzbGZuKVxuICAgICAgICAgICAgICBmb3IgKDsgaSA8IGw7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAoZm4odGhpc1tpXSwgaSkpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICwgdG9BcnJheTogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXAuc2xpY2UuY2FsbCh0aGlzKSB9XG5cbiAgICAgICAgICAsIHNpemU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMubGVuZ3RoIH1cblxuICAgICAgICAgICwgZWFjaDogZnVuY3Rpb24gKGZuLCBjdHgpIHtcbiAgICAgICAgICAgICAgdmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGhcbiAgICAgICAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspXG4gICAgICAgICAgICAgICAgZm4uY2FsbChjdHggfHwgdGhpc1tpXSwgdGhpc1tpXSwgaSwgdGhpcylcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcXVhY2sgbGlrZSBhIGR1Y2sgKEFycmF5KVxuICAgICAgICAgICwgcHVzaDogQXAucHVzaFxuICAgICAgICAgICwgc29ydDogQXAuc29ydFxuICAgICAgICAgICwgc3BsaWNlOiBBcC5zcGxpY2VcbiAgICAgICAgfVxuXG4gICAgICAgIFQucHJvdG90eXBlLnByZXYgPSBULnByb3RvdHlwZS5wcmV2aW91c1xuXG4gICAgICAgIGZ1bmN0aW9uIHQoZWxzKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBUKGlzU3RyaW5nKGVscykgPyBzZWxlY3RvckZpbmQoZWxzLCBkb2MpIDogZWxzKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXh0ZW5kIHRyYXZlcnN0eSBmdW5jdGlvbmFsaXR5IHdpdGggY3VzdG9tIG1ldGhvZHNcbiAgICAgICAgdC5hdWcgPSBmdW5jdGlvbiAobWV0aG9kcykge1xuICAgICAgICAgIHZhciBrZXksIG1ldGhvZFxuICAgICAgICAgIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgICAgICAgIG1ldGhvZCA9IG1ldGhvZHNba2V5XVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgVC5wcm90b3R5cGVba2V5XSA9IG1ldGhvZFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgdC5zZXRTZWxlY3RvckVuZ2luZSA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgLy8gZmVhdHVyZSB0ZXN0aW5nIHRoZSBzZWxlY3RvciBlbmdpbmUgbGlrZSBhIGJvc3NcbiAgICAgICAgICB2YXIgc3MsIHIsIGEsIF9zZWxlY3Rvck1hdGNoZXMsIF9zZWxlY3RvckZpbmRcbiAgICAgICAgICAgICwgZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdwJylcbiAgICAgICAgICAgICwgc2VsZWN0ID0gcy5zZWxlY3QgfHwgcy5zZWwgfHwgc1xuXG4gICAgICAgICAgZS5pbm5lckhUTUwgPSAnPGEvPjxpLz48Yi8+J1xuICAgICAgICAgIGEgPSBlLmZpcnN0Q2hpbGRcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gWU8hIEkgSEVBUkQgWU9VIExJS0VEIE5FU1RFRCBURVJOQVJZIE9QRVJBVE9SUyBTTyBJIENPT0tFRCBTT01FIFVQIEZPUiBZT1UhXG4gICAgICAgICAgICAvLyAob25lIGRheSBJIG1pZ2h0IGxvb3AgdGhpcy4uLilcblxuICAgICAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGhvdyB3ZSBkbyBhIG1hdGNoZXNTZWxlY3RvclxuICAgICAgICAgICAgX3NlbGVjdG9yTWF0Y2hlcyA9IGlzRnVuY3Rpb24ocy5tYXRjaGluZylcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoc2VsZWN0b3IsIGVsKSB7IHJldHVybiBzLm1hdGNoaW5nKFtlbF0sIHNlbGVjdG9yKS5sZW5ndGggPiAwIH1cbiAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKHMuaXMpXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoc2VsZWN0b3IsIGVsKSB7IHJldHVybiBzLmlzKGVsLCBzZWxlY3RvcikgfVxuICAgICAgICAgICAgICAgIDogaXNGdW5jdGlvbihzLm1hdGNoZXNTZWxlY3RvcilcbiAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKHNlbGVjdG9yLCBlbCkgeyByZXR1cm4gcy5tYXRjaGVzU2VsZWN0b3IoZWwsIHNlbGVjdG9yKSB9XG4gICAgICAgICAgICAgICAgICA6IGlzRnVuY3Rpb24ocy5tYXRjaClcbiAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoc2VsZWN0b3IsIGVsKSB7IHJldHVybiBzLm1hdGNoKGVsLCBzZWxlY3RvcikgfVxuICAgICAgICAgICAgICAgICAgICA6IGlzRnVuY3Rpb24ocy5tYXRjaGVzKVxuICAgICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKHNlbGVjdG9yLCBlbCkgeyByZXR1cm4gcy5tYXRjaGVzKGVsLCBzZWxlY3RvcikgfVxuICAgICAgICAgICAgICAgICAgICAgIDogbnVsbFxuXG4gICAgICAgICAgICBpZiAoIV9zZWxlY3Rvck1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgLy8gcGVyaGFwcyBpdCdzIGFuIHNlbGVjdG9yKHgpLmlzKHkpIHR5cGUgc2VsZWN0b3I/XG4gICAgICAgICAgICAgIHNzID0gcygnYScsIGUpXG4gICAgICAgICAgICAgIF9zZWxlY3Rvck1hdGNoZXMgPSBpc0Z1bmN0aW9uKHNzLl9pcylcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uIChzZWxlY3RvciwgZWwpIHsgcmV0dXJuIHMoZWwpLl9pcyhzZWxlY3RvcikgfSAvLyBvcmlnaW5hbCAuaXMoKSwgcmVwbGFjZWQgYnkgRW5kZXIgYnJpZGdlXG4gICAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKHNzLm1hdGNoaW5nKVxuICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoc2VsZWN0b3IsIGVsKSB7IHJldHVybiBzKGVsKS5tYXRjaGluZyhzZWxlY3RvcikubGVuZ3RoID4gMCB9XG4gICAgICAgICAgICAgICAgICA6IGlzRnVuY3Rpb24oc3MuaXMpICYmICFzcy5pcy5fX2lnbm9yZVxuICAgICAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uIChzZWxlY3RvciwgZWwpIHsgcmV0dXJuIHMoZWwpLmlzKHNlbGVjdG9yKSB9XG4gICAgICAgICAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKHNzLm1hdGNoZXNTZWxlY3RvcilcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKHNlbGVjdG9yLCBlbCkgeyByZXR1cm4gcyhlbCkubWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICA6IGlzRnVuY3Rpb24oc3MubWF0Y2gpXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKHNlbGVjdG9yLCBlbCkgeyByZXR1cm4gcyhlbCkubWF0Y2goc2VsZWN0b3IpIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKHNzLm1hdGNoZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoc2VsZWN0b3IsIGVsKSB7IHJldHVybiBzKGVsKS5tYXRjaGVzKHNlbGVjdG9yKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghX3NlbGVjdG9yTWF0Y2hlcylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYXZlcnN0eTogY291bGRuXFwndCBmaW5kIHNlbGVjdG9yIGVuZ2luZVxcJ3MgYG1hdGNoZXNTZWxlY3RvcmAnKVxuXG4gICAgICAgICAgICAvLyB2ZXJpZnkgdGhhdCB3ZSBoYXZlIGEgd29ya2luZyBgbWF0Y2hlc1NlbGVjdG9yYFxuICAgICAgICAgICAgaWYgKF9zZWxlY3Rvck1hdGNoZXMoJ3gseScsIGUpIHx8ICFfc2VsZWN0b3JNYXRjaGVzKCdhLHAnLCBlKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYXZlcnN0eTogY291bGRuXFwndCBtYWtlIHNlbGVjdG9yIGVuZ2luZVxcJ3MgYG1hdGNoZXNTZWxlY3RvcmAgd29yaycpXG5cbiAgICAgICAgICAgIC8vIGJhc2ljIHNlbGVjdFxuICAgICAgICAgICAgaWYgKChyID0gc2VsZWN0KCdiLGEnLCBlKSkubGVuZ3RoICE9PSAyKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYXZlcnN0eTogZG9uXFwndCBrbm93IGhvdyB0byB1c2UgdGhpcyBzZWxlY3RvciBlbmdpbmUnKVxuXG4gICAgICAgICAgICAvLyBjaGVjayB0byBzZWUgaWYgdGhlIHNlbGVjdG9yIGVuZ2luZSBoYXMgZ2l2ZW4gdXMgdGhlIHJlc3VsdHMgaW4gZG9jdW1lbnQtb3JkZXJcbiAgICAgICAgICAgIC8vIGFuZCBpZiBub3QsIHdvcmsgYXJvdW5kIGl0XG4gICAgICAgICAgICBfc2VsZWN0b3JGaW5kID0gclswXSA9PT0gYSA/IHNlbGVjdCA6IGNyZWF0ZVVub3JkZXJlZEVuZ2luZVNlbGVjdG9yRmluZChzZWxlY3QsIF9zZWxlY3Rvck1hdGNoZXMpXG5cbiAgICAgICAgICAgIC8vIGhhdmUgd2UgZG9uZSBlbm91Z2ggdG8gZ2V0IGEgd29ya2luZyBgc2VsZWN0b3JGaW5kYD9cbiAgICAgICAgICAgIGlmICgociA9IF9zZWxlY3RvckZpbmQoJ2IsYScsIGUpKS5sZW5ndGggIT09IDIgfHwgclswXSAhPT0gYSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmF2ZXJzdHk6IGNvdWxkblxcJ3QgbWFrZSBzZWxlY3RvciBlbmdpbmUgd29yaycpXG5cbiAgICAgICAgICAgIHNlbGVjdG9yTWF0Y2hlcyA9IF9zZWxlY3Rvck1hdGNoZXNcbiAgICAgICAgICAgIHNlbGVjdG9yRmluZCA9IF9zZWxlY3RvckZpbmRcbiAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgdGhyb3cgaXNTdHJpbmcoZXgpXG4gICAgICAgICAgICAgID8gZXhcbiAgICAgICAgICAgICAgOiBuZXcgRXJyb3IoJ1RyYXZlcnN0eTogZXJyb3Igd2hpbGUgZmlndXJpbmcgb3V0IGhvdyB0aGUgc2VsZWN0b3IgZW5naW5lIHdvcmtzOiAnICsgKGV4Lm1lc3NhZ2UgfHwgZXgpKVxuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlID0gbnVsbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0XG4gICAgICAgIH1cblxuICAgICAgICB0Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29udGV4dC50cmF2ZXJzdHkgPSBvbGRcbiAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRcbiAgICAgIH0oKSlcbiBcbiAgcmV0dXJuIHRyYXZlcnN0eVxufSk7IiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgIExvZy5qcyAtIExpZ2h0d2VpZ2h0IHdyYXBwZXIgZm9yIGNvbnNvbGUubG9nXG5cbiAgIFVzYWdlOiBsb2coJ2luc2lkZSBjb29sRnVuYycsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAqIHBhdWxpcmlzaC5jb20vMjAwOS9sb2ctYS1saWdodHdlaWdodC13cmFwcGVyLWZvci1jb25zb2xlbG9nL1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbndpbmRvdy5sb2cgPSBmdW5jdGlvbiBmKCkge1xuXHRsb2cuaGlzdG9yeSA9IGxvZy5oaXN0b3J5IHx8IFtdO1xuXHRsb2cuaGlzdG9yeS5wdXNoKGFyZ3VtZW50cyk7XG5cdGlmICh0aGlzLmNvbnNvbGUpIHtcblx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdG5ld2Fycjtcblx0XHR0cnkge1xuXHRcdFx0YXJncy5jYWxsZWUgPSBmLmNhbGxlcjtcblx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdG5ld2FyciA9IFtdLnNsaWNlLmNhbGwoYXJncyk7XG5cdFx0aWYgKHR5cGVvZiBjb25zb2xlLmxvZyA9PT0gJ29iamVjdCcpICB7XG5cdFx0XHRsb2cuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgbmV3YXJyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgbmV3YXJyKTtcblx0XHR9XG5cdH1cbn07XG4iLCIvKiEgXG5JbmNsdWRlZCBzaGltczogQXJyYXkuZm9yRWFjaCxBcnJheS5maWx0ZXIsQXJyYXkubWFwLEZ1bmN0aW9uLmJpbmQsRXZlbnRMaXN0ZW5lclxuKi9cblxuLypcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCgpXG4qL1xuaWYgKCFBcnJheS5wcm90b3R5cGUuZm9yRWFjaCkge1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiwgcjtcbiAgICAgICAgaWYgKHRoaXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIiB0aGlzIGlzIG51bGwgb3Igbm90IGRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMS4gTGV0IE8gYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIFRvT2JqZWN0IHBhc3NpbmcgdGhlIHx0aGlzfCB2YWx1ZSBhcyB0aGUgYXJndW1lbnQuXG4gICAgICAgIHZhciBpID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICAvLyAyLiBMZXQgbGVuVmFsdWUgYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBHZXQgaW50ZXJuYWwgbWV0aG9kIG9mIE8gd2l0aCB0aGUgYXJndW1lbnQgXCJsZW5ndGhcIi5cbiAgICAgICAgLy8gMy4gTGV0IGxlbiBiZSBUb1VpbnQzMihsZW5WYWx1ZSkuXG4gICAgICAgIHZhciBvID0gaS5sZW5ndGggPj4+IDA7XG4gICAgICAgIC8vIDQuIElmIElzQ2FsbGFibGUoY2FsbGJhY2spIGlzIGZhbHNlLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG4gICAgICAgIC8vIFNlZTogaHR0cDovL2VzNS5naXRodWIuY29tLyN4OS4xMVxuICAgICAgICBpZiAodHlwZW9mIHQgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcih0ICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNS4gSWYgdGhpc0FyZyB3YXMgc3VwcGxpZWQsIGxldCBUIGJlIHRoaXNBcmc7IGVsc2UgbGV0IFQgYmUgdW5kZWZpbmVkLlxuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgbiA9IGU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4gTGV0IGsgYmUgMFxuICAgICAgICByID0gMDtcbiAgICAgICAgLy8gNy4gUmVwZWF0LCB3aGlsZSBrIDwgbGVuXG4gICAgICAgIHdoaWxlIChyIDwgbykge1xuICAgICAgICAgICAgdmFyIGE7XG4gICAgICAgICAgICAvLyBhLiBMZXQgUGsgYmUgVG9TdHJpbmcoaykuXG4gICAgICAgICAgICAvLyAgIFRoaXMgaXMgaW1wbGljaXQgZm9yIExIUyBvcGVyYW5kcyBvZiB0aGUgaW4gb3BlcmF0b3JcbiAgICAgICAgICAgIC8vIGIuIExldCBrUHJlc2VudCBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIEhhc1Byb3BlcnR5IGludGVybmFsIG1ldGhvZCBvZiBPIHdpdGggYXJndW1lbnQgUGsuXG4gICAgICAgICAgICAvLyAgIFRoaXMgc3RlcCBjYW4gYmUgY29tYmluZWQgd2l0aCBjXG4gICAgICAgICAgICAvLyBjLiBJZiBrUHJlc2VudCBpcyB0cnVlLCB0aGVuXG4gICAgICAgICAgICBpZiAociBpbiBpKSB7XG4gICAgICAgICAgICAgICAgLy8gaS4gTGV0IGtWYWx1ZSBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIEdldCBpbnRlcm5hbCBtZXRob2Qgb2YgTyB3aXRoIGFyZ3VtZW50IFBrLlxuICAgICAgICAgICAgICAgIGEgPSBpW3JdO1xuICAgICAgICAgICAgICAgIC8vIGlpLiBDYWxsIHRoZSBDYWxsIGludGVybmFsIG1ldGhvZCBvZiBjYWxsYmFjayB3aXRoIFQgYXMgdGhlIHRoaXMgdmFsdWUgYW5kXG4gICAgICAgICAgICAgICAgLy8gYXJndW1lbnQgbGlzdCBjb250YWluaW5nIGtWYWx1ZSwgaywgYW5kIE8uXG4gICAgICAgICAgICAgICAgdC5jYWxsKG4sIGEsIHIsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZC4gSW5jcmVhc2UgayBieSAxLlxuICAgICAgICAgICAgcisrO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLypcbiAgICBBcnJheS5wcm90b3R5cGUuZmlsdGVyKClcbiovXG5pZiAoIUFycmF5LnByb3RvdHlwZS5maWx0ZXIpIHtcbiAgICBBcnJheS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24odCkge1xuICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgaWYgKHRoaXMgPT09IHZvaWQgMCB8fCB0aGlzID09PSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgIHZhciBlID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgbiA9IGUubGVuZ3RoID4+PiAwO1xuICAgICAgICBpZiAodHlwZW9mIHQgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB2YXIgciA9IFtdO1xuICAgICAgICB2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMiA/IGFyZ3VtZW50c1sxXSA6IHZvaWQgMDtcbiAgICAgICAgZm9yICh2YXIgbyA9IDA7IG8gPCBuOyBvKyspIHtcbiAgICAgICAgICAgIGlmIChvIGluIGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IGVbb107XG4gICAgICAgICAgICAgICAgLy8gTk9URTogVGVjaG5pY2FsbHkgdGhpcyBzaG91bGQgT2JqZWN0LmRlZmluZVByb3BlcnR5IGF0XG4gICAgICAgICAgICAgICAgLy8gICAgICAgdGhlIG5leHQgaW5kZXgsIGFzIHB1c2ggY2FuIGJlIGFmZmVjdGVkIGJ5XG4gICAgICAgICAgICAgICAgLy8gICAgICAgcHJvcGVydGllcyBvbiBPYmplY3QucHJvdG90eXBlIGFuZCBBcnJheS5wcm90b3R5cGUuXG4gICAgICAgICAgICAgICAgLy8gICAgICAgQnV0IHRoYXQgbWV0aG9kJ3MgbmV3LCBhbmQgY29sbGlzaW9ucyBzaG91bGQgYmVcbiAgICAgICAgICAgICAgICAvLyAgICAgICByYXJlLCBzbyB1c2UgdGhlIG1vcmUtY29tcGF0aWJsZSBhbHRlcm5hdGl2ZS5cbiAgICAgICAgICAgICAgICBpZiAodC5jYWxsKGksIGEsIG8sIGUpKSByLnB1c2goYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbn1cblxuLypcbiAgIEFycmF5IG1hcCBwYXRjaFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbmlmICghKFwibWFwXCIgaW4gQXJyYXkucHJvdG90eXBlKSkge1xuICAgIEFycmF5LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcy5sZW5ndGggPj4+IDAsIHIgPSBBcnJheShuKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICByW2ldID0gdC5jYWxsKGUsIHRoaXNbaV0sIGksIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH07XG59XG5cbi8qXG4gICAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQoKVxuKi9cbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIGNsb3Nlc3QgdGhpbmcgcG9zc2libGUgdG8gdGhlIEVDTUFTY3JpcHQgNVxuICAgICAgICAgICAgLy8gaW50ZXJuYWwgSXNDYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIC0gd2hhdCBpcyB0cnlpbmcgdG8gYmUgYm91bmQgaXMgbm90IGNhbGxhYmxlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgbiA9IHRoaXMsIHIgPSBmdW5jdGlvbigpIHt9LCBpID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbi5hcHBseSh0aGlzIGluc3RhbmNlb2YgciAmJiB0ID8gdGhpcyA6IHQsIGUuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgfTtcbiAgICAgICAgci5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcbiAgICAgICAgaS5wcm90b3R5cGUgPSBuZXcgcigpO1xuICAgICAgICByZXR1cm4gaTtcbiAgICB9O1xufVxuXG4vLyBFdmVudExpc3RlbmVyIHwgTUlUL0dQTDIgfCBodHRwczovL2dpdGh1Yi5jb20vam9uYXRoYW50bmVhbC9FdmVudExpc3RlbmVyXG50aGlzLkVsZW1lbnQgJiYgRWxlbWVudC5wcm90b3R5cGUuYXR0YWNoRXZlbnQgJiYgIUVsZW1lbnQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgJiYgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCh0LCBlKSB7XG4gICAgICAgIFdpbmRvdy5wcm90b3R5cGVbdF0gPSBIVE1MRG9jdW1lbnQucHJvdG90eXBlW3RdID0gRWxlbWVudC5wcm90b3R5cGVbdF0gPSBlO1xuICAgIH1cbiAgICAvLyBhZGRcbiAgICB0KFwiYWRkRXZlbnRMaXN0ZW5lclwiLCBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBuID0gdGhpcywgciA9IG4uYWRkRXZlbnRMaXN0ZW5lci5saXN0ZW5lcnMgPSBuLmFkZEV2ZW50TGlzdGVuZXIubGlzdGVuZXJzIHx8IHt9LCBpID0gclt0XSA9IHJbdF0gfHwgW107XG4gICAgICAgIC8vIGlmIG5vIGV2ZW50cyBleGlzdCwgYXR0YWNoIHRoZSBsaXN0ZW5lclxuICAgICAgICBpZiAoIWkubGVuZ3RoKSB7XG4gICAgICAgICAgICBuLmF0dGFjaEV2ZW50KFwib25cIiArIHQsIGkuZXZlbnQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBuLmRvY3VtZW50ICYmIG4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IG4uZG9jdW1lbnRFbGVtZW50IHx8IHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsTGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBwb2x5ZmlsbCB3M2MgcHJvcGVydGllcyBhbmQgbWV0aG9kc1xuICAgICAgICAgICAgICAgIHQuY3VycmVudFRhcmdldCA9IG47XG4gICAgICAgICAgICAgICAgdC5wYWdlWCA9IHQuY2xpZW50WCArIGUuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgICAgICB0LnBhZ2VZID0gdC5jbGllbnRZICsgZS5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgdC5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0LnJlbGF0ZWRUYXJnZXQgPSB0LmZyb21FbGVtZW50IHx8IG51bGw7XG4gICAgICAgICAgICAgICAgdC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0LnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0LnRhcmdldCA9IHQuc3JjRWxlbWVudCB8fCBuO1xuICAgICAgICAgICAgICAgIHQudGltZVN0YW1wID0gK25ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFuIGNhY2hlZCBsaXN0IG9mIHRoZSBtYXN0ZXIgZXZlbnRzIGxpc3QgKHRvIHByb3RlY3QgdGhpcyBsb29wIGZyb20gYnJlYWtpbmcgd2hlbiBhbiBldmVudCBpcyByZW1vdmVkKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBvID0gW10uY29uY2F0KGkpLCBhLCBsID0gdHJ1ZTsgbCAmJiAoYSA9IG9bcl0pOyArK3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIHRoZSBjYWNoZWQgZXZlbnQgc3RpbGwgZXhpc3RzIGluIHRoZSBtYXN0ZXIgZXZlbnRzIGxpc3RcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDAsIHM7IHMgPSBpW2NdOyArK2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09IGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmNhbGwobiwgdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgdGhlIGV2ZW50IHRvIHRoZSBtYXN0ZXIgZXZlbnQgbGlzdFxuICAgICAgICBpLnB1c2goZSk7XG4gICAgfSk7XG4gICAgLy8gcmVtb3ZlXG4gICAgdChcInJlbW92ZUV2ZW50TGlzdGVuZXJcIiwgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbiA9IHRoaXMsIHIgPSBuLmFkZEV2ZW50TGlzdGVuZXIubGlzdGVuZXJzID0gbi5hZGRFdmVudExpc3RlbmVyLmxpc3RlbmVycyB8fCB7fSwgaSA9IHJbdF0gPSByW3RdIHx8IFtdO1xuICAgICAgICAvLyByZW1vdmUgdGhlIG5ld2VzdCBtYXRjaGluZyBldmVudCBmcm9tIHRoZSBtYXN0ZXIgZXZlbnQgbGlzdFxuICAgICAgICBmb3IgKHZhciBvID0gaS5sZW5ndGggLSAxLCBhOyBhID0gaVtvXTsgLS1vKSB7XG4gICAgICAgICAgICBpZiAoYSA9PSBlKSB7XG4gICAgICAgICAgICAgICAgaS5zcGxpY2UobywgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgbm8gZXZlbnRzIGV4aXN0LCBkZXRhY2ggdGhlIGxpc3RlbmVyXG4gICAgICAgIGlmICghaS5sZW5ndGggJiYgaS5ldmVudCkge1xuICAgICAgICAgICAgbi5kZXRhY2hFdmVudChcIm9uXCIgKyB0LCBpLmV2ZW50KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGRpc3BhdGNoXG4gICAgdChcImRpc3BhdGNoRXZlbnRcIiwgZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXMsIG4gPSB0LnR5cGUsIHIgPSBlLmFkZEV2ZW50TGlzdGVuZXIubGlzdGVuZXJzID0gZS5hZGRFdmVudExpc3RlbmVyLmxpc3RlbmVycyB8fCB7fSwgaSA9IHJbbl0gPSByW25dIHx8IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGUuZmlyZUV2ZW50KFwib25cIiArIG4sIHQpO1xuICAgICAgICB9IGNhdGNoIChvKSB7XG4gICAgICAgICAgICBpZiAoaS5ldmVudCkge1xuICAgICAgICAgICAgICAgIGkuZXZlbnQodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBDdXN0b21FdmVudFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXaW5kb3cucHJvdG90eXBlLCBcIkN1c3RvbUV2ZW50XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBlKG4sIHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHQuZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKSwgbztcbiAgICAgICAgICAgICAgICBpLnR5cGUgPSBuO1xuICAgICAgICAgICAgICAgIGZvciAobyBpbiByKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvID09IFwiY2FuY2VsYWJsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpLnJldHVyblZhbHVlID0gIXIuY2FuY2VsYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvID09IFwiYnViYmxlc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpLmNhbmNlbEJ1YmJsZSA9ICFyLmJ1YmJsZXM7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobyA9PSBcImRldGFpbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpLmRldGFpbCA9IHIuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIHJlYWR5XG4gICAgZnVuY3Rpb24gZSh0KSB7XG4gICAgICAgIGlmIChlLmludGVydmFsICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIGUuaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGUuaW50ZXJ2YWwpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJET01Db250ZW50TG9hZGVkXCIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlLmludGVydmFsID0gc2V0SW50ZXJ2YWwoZSwgMSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGUpO1xufSgpO1xuXG4hdGhpcy5DdXN0b21FdmVudCAmJiBmdW5jdGlvbigpIHtcbiAgICAvLyBDdXN0b21FdmVudCBmb3IgYnJvd3NlcnMgd2hpY2ggZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCB0aGUgQ29uc3RydWN0b3IgbWV0aG9kXG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gZnVuY3Rpb24gdChlLCBuKSB7XG4gICAgICAgIHZhciByO1xuICAgICAgICBuID0gbiB8fCB7XG4gICAgICAgICAgICBidWJibGVzOiBmYWxzZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZGV0YWlsOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHIgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuICAgICAgICAgICAgci5pbml0Q3VzdG9tRXZlbnQoZSwgbi5idWJibGVzLCBuLmNhbmNlbGFibGUsIG4uZGV0YWlsKTtcbiAgICAgICAgfSBjYXRjaCAoaSkge1xuICAgICAgICAgICAgLy8gZm9yIGJyb3dzZXJzIHdoaWNoIGRvbid0IHN1cHBvcnQgQ3VzdG9tRXZlbnQgYXQgYWxsLCB3ZSB1c2UgYSByZWd1bGFyIGV2ZW50IGluc3RlYWRcbiAgICAgICAgICAgIHIgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgICAgICAgICAgci5pbml0RXZlbnQoZSwgbi5idWJibGVzLCBuLmNhbmNlbGFibGUpO1xuICAgICAgICAgICAgci5kZXRhaWwgPSBuLmRldGFpbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjtcbiAgICB9O1xufSgpOyIsIi8qXG5cdHNvY2tldHMuanNcbiovXG5cbi8vIGRlcGVuZGVuY2llcyBmb3IgdGhpcyBtb2R1bGUgZ28gaGVyZVxudmFyIFVJID0gcmVxdWlyZSgnLi91aScpO1xuXG52YXIgU29ja2V0cyA9IHtcblx0c29ja2V0IDogbnVsbCxcblxuXHRpbml0IDogZnVuY3Rpb24gKCkge1xuXHRcdGNvbnNvbGUuZGVidWcoJ0tPLnNvY2tldHMgbW9kdWxlIGlzIGJlaW5nIGluaXRpYWxpc2VkJyk7XG5cblx0XHR0aGlzLm1ha2VTb2NrZXRDb25uZWN0aW9uKCk7XG5cblx0XHR0aGlzLkxpc3RlbmVycy5zZXR1cCgpO1xuXHR9LFxuXG5cdG1ha2VTb2NrZXRDb25uZWN0aW9uIDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGNvbm5lY3Rpb25VUkwgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWU7XG5cblx0XHR0aGlzLnNvY2tldCA9IGlvLmNvbm5lY3QoY29ubmVjdGlvblVSTCk7XG5cblx0fSxcblxuXHRMaXN0ZW5lcnMgOiB7XG5cblx0XHRzZXR1cCA6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0U29ja2V0cy5zb2NrZXQub24oJ3R3ZWV0JywgdGhpcy5vblR3ZWV0UmVjZWl2ZWQpO1xuXG5cdFx0fSxcblxuXHRcdG9uVHdlZXRSZWNlaXZlZCA6IGZ1bmN0aW9uIChzdGF0ZU9iaikge1xuXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gc3RhdGVPYmopIHtcblxuXHRcdFx0XHRVSS51cGRhdGVTeW1ib2woa2V5LCBzdGF0ZU9ialtrZXldKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldHM7IiwiLypcblx0VUkuanNcblx0RXhhbXBsZSBtb2R1bGUgdG8gc2hvdyBob3cgdG8gaW5jbHVkZSBvdGhlciBKUyBmaWxlcyBpbnRvIHlvdSBicm93c2VyaWZ5IGJ1aWxkXG4qL1xuXG4vLyBkZXBlbmRlbmNpZXMgZm9yIHRoaXMgbW9kdWxlIGdvIGhlcmVcbnZhciAkID0gcmVxdWlyZSgndHJhdmVyc3R5JyksXG5cdHF3ZXJ5ID0gcmVxdWlyZSgncXdlcnknKTtcblxuLy9naXZlIHVzIG9sZCBJRSBzZWxlY3RvciBzdXBwb3J0ICg8OClcbiQuc2V0U2VsZWN0b3JFbmdpbmUocXdlcnkpO1xuXG52YXIgVUkgPSB7XG5cdGluaXQgOiBmdW5jdGlvbiAoKSB7XG5cdFx0Y29uc29sZS5kZWJ1ZygnS08uVUkgbW9kdWxlIGlzIGJlaW5nIGluaXRpYWxpc2VkJyk7XG5cdH0sXG5cblxuXHR1cGRhdGVTeW1ib2wgOiBmdW5jdGlvbiAobmFtZSwgZGF0YSkge1xuXG5cdFx0Ly9sb2cobmFtZSwgZGF0YSlcblx0XHR2YXIgc3ltYm9sVG90YWwgPSAkKCcuc3ltYm9sLS0nICsgbmFtZSArICcgLnN5bWJvbC10b3RhbCcpO1xuXG5cdFx0c3ltYm9sVG90YWxbMF0uaW5uZXJIVE1MID0gZGF0YS50b3RhbDtcblxuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVJOyIsIi8qXHRBdXRob3I6XG5cdFx0VE1XIC0gKEF1dGhvciBOYW1lIEhlcmUpXG4qL1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cbi8vIERFRklORSBHTE9CQUwgTElCUyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4vLyBVbmNvbW1lbnQgdGhlIGxpbmUgYmVsb3cgdG8gZXhwb3NlIGpRdWVyeSBhcyBhIGdsb2JhbCBvYmplY3QgdG8gdGhlIHVzdWFsIHBsYWNlc1xuLy8gd2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0gcmVxdWlyZSgnLi9saWJzL2pxdWVyeS9qcXVlcnktMS4xMC4yLmpzJyk7XG5cbi8vIGZvcmNlIGNvbXBpbGF0aW9uIG9mIGdsb2JhbCBsaWJzIHRoYXQgZG9uJ3QgcmV0dXJuIGEgdmFsdWUuXG5yZXF1aXJlKFwiLi9oZWxwZXJzL2xvZ1wiKTtcbnJlcXVpcmUoXCIuL2hlbHBlcnMvc2hpbXNcIik7XG5cbnZhciBTb2NrZXRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL3NvY2tldHMnKTtcblxuXG4vL2luaXRpYWxpc2UgS08gb2JqZWN0XG52YXIgS08gPSB7fTtcblxuS08uQ29uZmlnID0ge1xuXG5cdGluaXQgOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRsb2coJ3J1bm5pbmcnKTtcblx0XHRTb2NrZXRzLmluaXQoKTtcblx0fVxufTtcblxuXG5LTy5Db25maWcuaW5pdCgpOyJdfQ==
